Platform Deployment
Project Overview
You are helping deploy an educational social platform built with:

Frontend: React (currently runs on localhost:3000)
Backend: Node.js/Express API (currently runs on localhost:5000)
Database: MySQL (currently on XAMPP/localhost)
Current State: Development complete, needs production deployment
Team: 3 junior developers leaving in 3 weeks, owner has basic technical knowledge

Critical Constraints

NO Docker - Client specifically doesn't want containerization
Budget: €300/month maximum
Maintenance: Must be manageable by someone with high school IT level
Timeline: 3 weeks to implement everything
Existing Code: MySQL schema with 16 tables already in production use

Deployment Architecture Decision
After analysis, we've decided on:

Hosting: Single Scaleway VPS (DEV1-L: €23/month, 4vCPU, 8GB RAM)
AI/RAG: ChromaDB (file-based, no server needed) + MySQL for metadata
LLM: Separate Scaleway GPU instance later (€150/month) with Ollama
No Migration: Keep existing MySQL database as-is

Required Deployment Structure

/var/www/msa-app/
├── backend/          # Express API (PM2 managed)
├── frontend/build/   # React production build
├── uploads/          # User uploaded files
├── vectordb/         # ChromaDB persistent storage
├── scripts/          # Maintenance scripts
└── backups/          # Automated backups

Key Technical Decisions Made

Database: Stay with MySQL (no PostgreSQL migration)
Vector Storage: ChromaDB in persistent file mode
Process Manager: PM2 for Node.js
Web Server: Nginx as reverse proxy
SSL: Let's Encrypt for free certificates

What Code Claude Needs to Implement
1. Deployment Scripts
Create automated deployment scripts that:

Build React frontend
Deploy via rsync/scp
Restart services properly
Handle environment variables

2. Server Configuration

Nginx config for React + Express
PM2 ecosystem file
Systemd services for auto-restart
Basic firewall rules

3. AI IntegrationKey Technical Decisions Made

Database: Stay with MySQL (no PostgreSQL migration)
Vector Storage: ChromaDB in persistent file mode
Process Manager: PM2 for Node.js
Web Server: Nginx as reverse proxy
SSL: Let's Encrypt for free certificates

What Code Claude Needs to Implement
1. Deployment Scripts
Create automated deployment scripts that:

Build React frontend
Deploy via rsync/scp
Restart services properly
Handle environment variables

2. Server Configuration

Nginx config for React + Express
PM2 ecosystem file
Systemd services for auto-restart
Basic firewall rules

3. AI Integration
# Simple ChromaDB integration needed:
- Local file persistence (no Docker)
- Simple Python API wrapper
- Integration with Express backend

4. Monitoring & Maintenance

Health check endpoints
Daily backup scripts
Simple restart scripts
Error logging setup

5. Emergency Procedures
Create simple bash scripts for common issues:

restart-all.sh
backup-now.sh
check-status.sh
view-logs.sh

Database Context
The MySQL database has these key tables:

users (with account_type: parent/child/teacher)
posts, comments, likes (social features)
mini_games, game_sessions (educational games)
messages, conversations (chat system)
achievements, quests (gamification)

For AI/RAG, only add:
Security Requirements

Store all secrets in .env files
Use PM2 environment management
MySQL bind to localhost only
Nginx rate limiting
Basic fail2ban setup

Expected Deliverables

setup-server.sh - One-time server setup script
deploy.sh - Deployment script for updates
nginx.conf - Complete Nginx configuration
ecosystem.config.js - PM2 configuration
backup.sh - Daily backup script
README-DEPLOYMENT.md - Step-by-step guide in French

Important Notes for Code Claude

Keep everything as SIMPLE as possible
Prefer bash scripts over complex tools
Document every step in French
Create scripts that a non-developer can run
Test everything with the assumption that the person running it has never used Linux before
No Kubernetes, no microservices, no complexity

Success Criteria
The deployment is successful if:

A high school student can restart the server if it crashes
The site auto-recovers from crashes
Backups run automatically
Total monthly cost stays under €300
No Docker knowledge required

Please adapt all code and scripts to work with the existing codebase structure and help create a deployment that will survive when the developers leave.