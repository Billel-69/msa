{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\Documents\\\\GitHub\\\\msa\\\\frontend\\\\src\\\\components\\\\NotificationToast.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nimport '../styles/NotificationToast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationToast = () => {\n  _s();\n  const {\n    token\n  } = useContext(AuthContext);\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    if (token) {\n      // Listen for gamification events\n      const eventSource = new EventSource(`http://localhost:5000/api/gamification/events/stream?token=${token}`);\n      eventSource.onmessage = event => {\n        try {\n          const notification = JSON.parse(event.data);\n          showNotification(notification);\n        } catch (error) {\n          console.error('Error parsing notification:', error);\n        }\n      };\n      eventSource.onerror = error => {\n        console.error('EventSource error:', error);\n        eventSource.close();\n      };\n      return () => {\n        eventSource.close();\n      };\n    }\n  }, [token]);\n  const showNotification = notification => {\n    const id = Date.now();\n    const newNotification = {\n      ...notification,\n      id\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // Auto-remove after 5 seconds\n    setTimeout(() => {\n      removeNotification(id);\n    }, 5000);\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  const getNotificationIcon = type => {\n    const icons = {\n      level_up: '🎉',\n      badge_earned: '🏅',\n      achievement_unlocked: '🏆',\n      xp_gained: '⭐',\n      streak_milestone: '🔥',\n      leaderboard_rank: '🥇'\n    };\n    return icons[type] || '🎊';\n  };\n  const getNotificationColor = type => {\n    const colors = {\n      level_up: '#28a745',\n      badge_earned: '#ffc107',\n      achievement_unlocked: '#007bff',\n      xp_gained: '#17a2b8',\n      streak_milestone: '#dc3545',\n      leaderboard_rank: '#6f42c1'\n    };\n    return colors[type] || '#6c757d';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-container\",\n    children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `notification-toast ${notification.priority || 'medium'}`,\n      style: {\n        borderLeftColor: getNotificationColor(notification.type)\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notification-icon\",\n            children: getNotificationIcon(notification.type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"notification-title\",\n            children: notification.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"notification-close\",\n            onClick: () => removeNotification(notification.id),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-message\",\n          children: notification.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), notification.metadata && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-metadata\",\n          children: [notification.metadata.badgeId && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"metadata-badge\",\n            children: [\"Badge: \", notification.metadata.badgeId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 37\n          }, this), notification.metadata.achievementId && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"metadata-achievement\",\n            children: [\"Achievement: \", notification.metadata.achievementId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 37\n          }, this), notification.metadata.xpGained && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"metadata-xp\",\n            children: [\"+\", notification.metadata.xpGained, \" XP\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)\n    }, notification.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n// Hook for manually triggering notifications\n_s(NotificationToast, \"/ij3Ep6Sg5u4wwB/dvWcoR+IwUY=\");\n_c = NotificationToast;\nexport const useNotification = () => {\n  const showSuccess = (title, message) => {\n    // This would integrate with the toast system\n    console.log('Success:', title, message);\n  };\n  const showError = (title, message) => {\n    console.log('Error:', title, message);\n  };\n  const showInfo = (title, message) => {\n    console.log('Info:', title, message);\n  };\n  return {\n    showSuccess,\n    showError,\n    showInfo\n  };\n};\nexport default NotificationToast;\nvar _c;\n$RefreshReg$(_c, \"NotificationToast\");","map":{"version":3,"names":["React","useState","useEffect","useContext","AuthContext","jsxDEV","_jsxDEV","NotificationToast","_s","token","notifications","setNotifications","eventSource","EventSource","onmessage","event","notification","JSON","parse","data","showNotification","error","console","onerror","close","id","Date","now","newNotification","prev","setTimeout","removeNotification","filter","n","getNotificationIcon","type","icons","level_up","badge_earned","achievement_unlocked","xp_gained","streak_milestone","leaderboard_rank","getNotificationColor","colors","className","children","map","priority","style","borderLeftColor","fileName","_jsxFileName","lineNumber","columnNumber","title","onClick","message","metadata","badgeId","achievementId","xpGained","_c","useNotification","showSuccess","log","showError","showInfo","$RefreshReg$"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/components/NotificationToast.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport '../styles/NotificationToast.css';\r\n\r\nconst NotificationToast = () => {\r\n    const { token } = useContext(AuthContext);\r\n    const [notifications, setNotifications] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            // Listen for gamification events\r\n            const eventSource = new EventSource(`http://localhost:5000/api/gamification/events/stream?token=${token}`);\r\n            \r\n            eventSource.onmessage = (event) => {\r\n                try {\r\n                    const notification = JSON.parse(event.data);\r\n                    showNotification(notification);\r\n                } catch (error) {\r\n                    console.error('Error parsing notification:', error);\r\n                }\r\n            };\r\n\r\n            eventSource.onerror = (error) => {\r\n                console.error('EventSource error:', error);\r\n                eventSource.close();\r\n            };\r\n\r\n            return () => {\r\n                eventSource.close();\r\n            };\r\n        }\r\n    }, [token]);\r\n\r\n    const showNotification = (notification) => {\r\n        const id = Date.now();\r\n        const newNotification = { ...notification, id };\r\n        \r\n        setNotifications(prev => [...prev, newNotification]);\r\n\r\n        // Auto-remove after 5 seconds\r\n        setTimeout(() => {\r\n            removeNotification(id);\r\n        }, 5000);\r\n    };\r\n\r\n    const removeNotification = (id) => {\r\n        setNotifications(prev => prev.filter(n => n.id !== id));\r\n    };\r\n\r\n    const getNotificationIcon = (type) => {\r\n        const icons = {\r\n            level_up: '🎉',\r\n            badge_earned: '🏅',\r\n            achievement_unlocked: '🏆',\r\n            xp_gained: '⭐',\r\n            streak_milestone: '🔥',\r\n            leaderboard_rank: '🥇'\r\n        };\r\n        return icons[type] || '🎊';\r\n    };\r\n\r\n    const getNotificationColor = (type) => {\r\n        const colors = {\r\n            level_up: '#28a745',\r\n            badge_earned: '#ffc107',\r\n            achievement_unlocked: '#007bff',\r\n            xp_gained: '#17a2b8',\r\n            streak_milestone: '#dc3545',\r\n            leaderboard_rank: '#6f42c1'\r\n        };\r\n        return colors[type] || '#6c757d';\r\n    };\r\n\r\n    return (\r\n        <div className=\"notification-container\">\r\n            {notifications.map((notification) => (\r\n                <div \r\n                    key={notification.id}\r\n                    className={`notification-toast ${notification.priority || 'medium'}`}\r\n                    style={{ borderLeftColor: getNotificationColor(notification.type) }}\r\n                >\r\n                    <div className=\"notification-content\">\r\n                        <div className=\"notification-header\">\r\n                            <span className=\"notification-icon\">\r\n                                {getNotificationIcon(notification.type)}\r\n                            </span>\r\n                            <span className=\"notification-title\">\r\n                                {notification.title}\r\n                            </span>\r\n                            <button \r\n                                className=\"notification-close\"\r\n                                onClick={() => removeNotification(notification.id)}\r\n                            >\r\n                                ×\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"notification-message\">\r\n                            {notification.message}\r\n                        </div>\r\n                        {notification.metadata && (\r\n                            <div className=\"notification-metadata\">\r\n                                {notification.metadata.badgeId && (\r\n                                    <span className=\"metadata-badge\">\r\n                                        Badge: {notification.metadata.badgeId}\r\n                                    </span>\r\n                                )}\r\n                                {notification.metadata.achievementId && (\r\n                                    <span className=\"metadata-achievement\">\r\n                                        Achievement: {notification.metadata.achievementId}\r\n                                    </span>\r\n                                )}\r\n                                {notification.metadata.xpGained && (\r\n                                    <span className=\"metadata-xp\">\r\n                                        +{notification.metadata.xpGained} XP\r\n                                    </span>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Hook for manually triggering notifications\r\nexport const useNotification = () => {\r\n    const showSuccess = (title, message) => {\r\n        // This would integrate with the toast system\r\n        console.log('Success:', title, message);\r\n    };\r\n\r\n    const showError = (title, message) => {\r\n        console.log('Error:', title, message);\r\n    };\r\n\r\n    const showInfo = (title, message) => {\r\n        console.log('Info:', title, message);\r\n    };\r\n\r\n    return { showSuccess, showError, showInfo };\r\n};\r\n\r\nexport default NotificationToast;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}