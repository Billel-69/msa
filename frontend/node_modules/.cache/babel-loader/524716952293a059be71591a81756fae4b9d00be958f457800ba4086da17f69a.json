{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\Documents\\\\GitHub\\\\msa\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { AUTH } from '../config';\nimport { parseApiError } from '../utils/errorHandler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const initializeAuth = () => {\n      try {\n        const storedToken = localStorage.getItem(AUTH.TOKEN_KEY);\n        const storedUser = localStorage.getItem(AUTH.USER_KEY);\n        if (storedToken && storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n\n          // Check token expiry (if we have an expiry timestamp stored)\n          const tokenExpiry = localStorage.getItem('tokenExpiry');\n          if (tokenExpiry && new Date().getTime() > parseInt(tokenExpiry)) {\n            // Token expired, clear auth data\n            console.log('AuthContext - Token expired');\n            logout();\n            return;\n          }\n          setToken(storedToken);\n          setUser(parsedUser);\n          console.log('AuthContext - Utilisateur restauré:', parsedUser.username);\n        } else {\n          console.log('AuthContext - Aucune donnée d\\'auth stockée');\n        }\n      } catch (error) {\n        console.error('AuthContext - Erreur lors de la restauration:', error);\n        // Nettoyer les données corrompues\n        logout();\n        setError('Erreur lors de la restauration de la session');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = (newToken, newUser) => {\n    try {\n      // Vérifier que les données sont valides\n      if (!newToken || !newUser) {\n        throw new Error('Token ou données utilisateur invalides');\n      }\n\n      // Calculate token expiry (default to 7 days from now)\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + AUTH.TOKEN_EXPIRY_DAYS);\n\n      // Stocker en localStorage pour persistance\n      localStorage.setItem(AUTH.TOKEN_KEY, newToken);\n      localStorage.setItem(AUTH.USER_KEY, JSON.stringify(newUser));\n      localStorage.setItem('tokenExpiry', expiryDate.getTime().toString());\n\n      // Mettre à jour l'état du contexte\n      setToken(newToken);\n      setUser(newUser);\n      setError(null);\n      console.log('AuthContext - Utilisateur connecté:', newUser.username);\n      return true;\n    } catch (error) {\n      console.error('AuthContext - Erreur de login:', error);\n      setError(parseApiError(error, 'Échec de connexion'));\n      return false;\n    }\n  };\n  const logout = () => {\n    try {\n      // Nettoyer le localStorage\n      localStorage.removeItem(AUTH.TOKEN_KEY);\n      localStorage.removeItem(AUTH.USER_KEY);\n      localStorage.removeItem('tokenExpiry');\n\n      // Réinitialiser l'état du contexte\n      setToken(null);\n      setUser(null);\n      setError(null);\n      console.log('AuthContext - Déconnexion réussie');\n      return true;\n    } catch (error) {\n      console.error('AuthContext - Erreur lors de la déconnexion:', error);\n      return false;\n    }\n  };\n  const updateUser = userData => {\n    try {\n      // Mettre à jour l'objet utilisateur stocké\n      const updatedUser = {\n        ...user,\n        ...userData\n      };\n\n      // Persister les changements\n      localStorage.setItem(AUTH.USER_KEY, JSON.stringify(updatedUser));\n\n      // Mettre à jour l'état\n      setUser(updatedUser);\n      console.log('AuthContext - Profil utilisateur mis à jour');\n      return true;\n    } catch (error) {\n      console.error('AuthContext - Erreur lors de la mise à jour du profil:', error);\n      setError(parseApiError(error, 'Échec de la mise à jour du profil'));\n      return false;\n    }\n  };\n  const clearError = () => setError(null);\n  const value = {\n    token,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    updateUser,\n    clearError,\n    isAuthenticated: !!token\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"ihfjI6MF9YjLOpbFlkCQPaRWc98=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth doit être utilisé à l\\'intérieur d\\'un AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AUTH","parseApiError","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","loading","setLoading","error","setError","initializeAuth","storedToken","localStorage","getItem","TOKEN_KEY","storedUser","USER_KEY","parsedUser","JSON","parse","tokenExpiry","Date","getTime","parseInt","console","log","logout","username","login","newToken","newUser","Error","expiryDate","setDate","getDate","TOKEN_EXPIRY_DAYS","setItem","stringify","toString","removeItem","updateUser","userData","updatedUser","clearError","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { AUTH } from '../config';\r\nimport { parseApiError } from '../utils/errorHandler';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    const [token, setToken] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const initializeAuth = () => {\r\n            try {\r\n                const storedToken = localStorage.getItem(AUTH.TOKEN_KEY);\r\n                const storedUser = localStorage.getItem(AUTH.USER_KEY);\r\n\r\n                if (storedToken && storedUser) {\r\n                    const parsedUser = JSON.parse(storedUser);\r\n                    \r\n                    // Check token expiry (if we have an expiry timestamp stored)\r\n                    const tokenExpiry = localStorage.getItem('tokenExpiry');\r\n                    if (tokenExpiry && new Date().getTime() > parseInt(tokenExpiry)) {\r\n                        // Token expired, clear auth data\r\n                        console.log('AuthContext - Token expired');\r\n                        logout();\r\n                        return;\r\n                    }\r\n\r\n                    setToken(storedToken);\r\n                    setUser(parsedUser);\r\n                    console.log('AuthContext - Utilisateur restauré:', parsedUser.username);\r\n                } else {\r\n                    console.log('AuthContext - Aucune donnée d\\'auth stockée');\r\n                }\r\n            } catch (error) {\r\n                console.error('AuthContext - Erreur lors de la restauration:', error);\r\n                // Nettoyer les données corrompues\r\n                logout();\r\n                setError('Erreur lors de la restauration de la session');\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        initializeAuth();\r\n    }, []);\r\n\r\n    const login = (newToken, newUser) => {\r\n        try {\r\n            // Vérifier que les données sont valides\r\n            if (!newToken || !newUser) {\r\n                throw new Error('Token ou données utilisateur invalides');\r\n            }\r\n\r\n            // Calculate token expiry (default to 7 days from now)\r\n            const expiryDate = new Date();\r\n            expiryDate.setDate(expiryDate.getDate() + AUTH.TOKEN_EXPIRY_DAYS);\r\n            \r\n            // Stocker en localStorage pour persistance\r\n            localStorage.setItem(AUTH.TOKEN_KEY, newToken);\r\n            localStorage.setItem(AUTH.USER_KEY, JSON.stringify(newUser));\r\n            localStorage.setItem('tokenExpiry', expiryDate.getTime().toString());\r\n            \r\n            // Mettre à jour l'état du contexte\r\n            setToken(newToken);\r\n            setUser(newUser);\r\n            setError(null);\r\n            \r\n            console.log('AuthContext - Utilisateur connecté:', newUser.username);\r\n            \r\n            return true;\r\n        } catch (error) {\r\n            console.error('AuthContext - Erreur de login:', error);\r\n            setError(parseApiError(error, 'Échec de connexion'));\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        try {\r\n            // Nettoyer le localStorage\r\n            localStorage.removeItem(AUTH.TOKEN_KEY);\r\n            localStorage.removeItem(AUTH.USER_KEY);\r\n            localStorage.removeItem('tokenExpiry');\r\n            \r\n            // Réinitialiser l'état du contexte\r\n            setToken(null);\r\n            setUser(null);\r\n            setError(null);\r\n            \r\n            console.log('AuthContext - Déconnexion réussie');\r\n            \r\n            return true;\r\n        } catch (error) {\r\n            console.error('AuthContext - Erreur lors de la déconnexion:', error);\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const updateUser = (userData) => {\r\n        try {\r\n            // Mettre à jour l'objet utilisateur stocké\r\n            const updatedUser = { ...user, ...userData };\r\n            \r\n            // Persister les changements\r\n            localStorage.setItem(AUTH.USER_KEY, JSON.stringify(updatedUser));\r\n            \r\n            // Mettre à jour l'état\r\n            setUser(updatedUser);\r\n            \r\n            console.log('AuthContext - Profil utilisateur mis à jour');\r\n            \r\n            return true;\r\n        } catch (error) {\r\n            console.error('AuthContext - Erreur lors de la mise à jour du profil:', error);\r\n            setError(parseApiError(error, 'Échec de la mise à jour du profil'));\r\n            return false;\r\n        }\r\n    };\r\n\r\n    const clearError = () => setError(null);\r\n\r\n    const value = {\r\n        token,\r\n        user,\r\n        loading,\r\n        error,\r\n        login,\r\n        logout,\r\n        updateUser,\r\n        clearError,\r\n        isAuthenticated: !!token\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth doit être utilisé à l\\'intérieur d\\'un AuthProvider');\r\n    }\r\n    return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}