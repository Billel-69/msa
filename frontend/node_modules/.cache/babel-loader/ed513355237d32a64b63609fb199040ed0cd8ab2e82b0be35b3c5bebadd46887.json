{"ast":null,"code":"/**\r\n * @file axiosInstance.js\r\n * @description Fichier de configuration pour une instance Axios centralisée.\r\n * Ce module crée une instance d'Axios avec une URL de base préconfigurée\r\n * et un intercepteur de requête pour ajouter automatiquement le token d'authentification JWT.\r\n * Cela simplifie les appels API à travers l'application.\r\n */\n\n// =================================================================================\n// IMPORTATIONS\n// =================================================================================\nimport axios from 'axios';\n\n// =================================================================================\n// CONFIGURATION DE L'INSTANCE AXIOS\n// =================================================================================\n\n// Crée une instance d'Axios avec des paramètres par défaut.\nconst axiosInstance = axios.create({\n  // L'URL de base de l'API backend. Toutes les requêtes relatives utiliseront cette URL.\n  baseURL: 'http://localhost:5000/api'\n});\n\n// =================================================================================\n// INTERCEPTEUR DE REQUÊTE\n// =================================================================================\n\n/**\r\n * Intercepteur de requête Axios.\r\n * Ce middleware s'exécute avant chaque requête envoyée depuis l'application.\r\n * Son rôle est de récupérer le token JWT depuis le localStorage et de l'injecter\r\n * dans l'en-tête 'Authorization' de la requête si le token existe.\r\n */\naxiosInstance.interceptors.request.use(config => {\n  // Récupère le token stocké dans le localStorage.\n  const token = localStorage.getItem('token');\n\n  // Si un token est trouvé, l'ajoute à l'en-tête d'autorisation.\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Retourne l'objet de configuration de la requête modifié (ou non).\n  return config;\n}, error => {\n  // Gère les erreurs qui pourraient survenir lors de la configuration de la requête.\n  // Cette fonction est rarement déclenchée mais est une bonne pratique à conserver.\n  console.error(\"Erreur dans l'intercepteur de requête Axios:\", error);\n  return Promise.reject(error);\n});\n\n// =================================================================================\n// EXPORTATION\n// =================================================================================\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","console","Promise","reject"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/utils/axiosInstance.js"],"sourcesContent":["/**\r\n * @file axiosInstance.js\r\n * @description Fichier de configuration pour une instance Axios centralisée.\r\n * Ce module crée une instance d'Axios avec une URL de base préconfigurée\r\n * et un intercepteur de requête pour ajouter automatiquement le token d'authentification JWT.\r\n * Cela simplifie les appels API à travers l'application.\r\n */\r\n\r\n// =================================================================================\r\n// IMPORTATIONS\r\n// =================================================================================\r\nimport axios from 'axios';\r\n\r\n// =================================================================================\r\n// CONFIGURATION DE L'INSTANCE AXIOS\r\n// =================================================================================\r\n\r\n// Crée une instance d'Axios avec des paramètres par défaut.\r\nconst axiosInstance = axios.create({\r\n    // L'URL de base de l'API backend. Toutes les requêtes relatives utiliseront cette URL.\r\n    baseURL: 'http://localhost:5000/api',\r\n});\r\n\r\n// =================================================================================\r\n// INTERCEPTEUR DE REQUÊTE\r\n// =================================================================================\r\n\r\n/**\r\n * Intercepteur de requête Axios.\r\n * Ce middleware s'exécute avant chaque requête envoyée depuis l'application.\r\n * Son rôle est de récupérer le token JWT depuis le localStorage et de l'injecter\r\n * dans l'en-tête 'Authorization' de la requête si le token existe.\r\n */\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n        // Récupère le token stocké dans le localStorage.\r\n        const token = localStorage.getItem('token');\r\n\r\n        // Si un token est trouvé, l'ajoute à l'en-tête d'autorisation.\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n\r\n        // Retourne l'objet de configuration de la requête modifié (ou non).\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // Gère les erreurs qui pourraient survenir lors de la configuration de la requête.\r\n        // Cette fonction est rarement déclenchée mais est une bonne pratique à conserver.\r\n        console.error(\"Erreur dans l'intercepteur de requête Axios:\", error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// =================================================================================\r\n// EXPORTATION\r\n// =================================================================================\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;;AAEA;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC/B;EACAC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAF,aAAa,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACR;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACvD;;EAEA;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP;EACA;EACAC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;EACpE,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA;AACA;AACA,eAAeX,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}