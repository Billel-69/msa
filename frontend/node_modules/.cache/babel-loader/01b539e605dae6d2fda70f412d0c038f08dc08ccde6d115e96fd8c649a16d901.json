{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\Documents\\\\GitHub\\\\msa\\\\frontend\\\\src\\\\components\\\\LeaderboardWidget.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/LeaderboardWidget.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LeaderboardWidget = ({\n  showAllLeaderboards = false,\n  token = null,\n  compact = false,\n  leaderboardId = null,\n  maxEntries = 10\n}) => {\n  _s();\n  const [leaderboards, setLeaderboards] = useState([]);\n  const [selectedLeaderboard, setSelectedLeaderboard] = useState(null);\n  const [leaderboardData, setLeaderboardData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [userPosition, setUserPosition] = useState(null);\n  useEffect(() => {\n    if (token) {\n      fetchLeaderboards();\n    }\n  }, [token]);\n  useEffect(() => {\n    if (selectedLeaderboard && token) {\n      fetchLeaderboardData(selectedLeaderboard.id);\n    }\n  }, [selectedLeaderboard, token]);\n  const fetchLeaderboards = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/api/gamification/leaderboards', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setLeaderboards(data.data || []);\n\n        // Auto-select first leaderboard or specified one\n        if (data.data && data.data.length > 0) {\n          const defaultBoard = leaderboardId ? data.data.find(lb => lb.id === leaderboardId) : data.data[0];\n          if (defaultBoard) {\n            setSelectedLeaderboard(defaultBoard);\n          }\n        }\n      } else {\n        setError('Failed to load leaderboards');\n      }\n    } catch (error) {\n      console.error('Error fetching leaderboards:', error);\n      setError('Failed to connect to server');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchLeaderboardData = async leaderboardId => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:5000/api/gamification/leaderboards/${leaderboardId}?limit=${maxEntries}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setLeaderboardData(data.data.entries || []);\n        setUserPosition(data.data.userPosition || null);\n      } else {\n        setError('Failed to load leaderboard data');\n      }\n    } catch (error) {\n      console.error('Error fetching leaderboard data:', error);\n      setError('Failed to connect to server');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const getRankIcon = rank => {\n    switch (rank) {\n      case 1:\n        return '🥇';\n      case 2:\n        return '🥈';\n      case 3:\n        return '🥉';\n      default:\n        return `#${rank}`;\n    }\n  };\n  const getRankColor = rank => {\n    switch (rank) {\n      case 1:\n        return '#FFD700';\n      case 2:\n        return '#C0C0C0';\n      case 3:\n        return '#CD7F32';\n      default:\n        return '#666';\n    }\n  };\n  const formatValue = (value, type) => {\n    if (type === 'xp') {\n      if (value >= 1000000) return `${(value / 1000000).toFixed(1)}M`;\n      if (value >= 1000) return `${(value / 1000).toFixed(1)}K`;\n      return value.toString();\n    }\n    return value;\n  };\n  const getLeaderboardIcon = type => {\n    const icons = {\n      xp: '⭐',\n      badges: '🏅',\n      achievements: '🏆',\n      games: '🎮',\n      streaks: '🔥'\n    };\n    return icons[type] || '📊';\n  };\n  const getPeriodLabel = period => {\n    const labels = {\n      daily: 'Today',\n      weekly: 'This Week',\n      monthly: 'This Month',\n      all_time: 'All Time'\n    };\n    return labels[period] || period;\n  };\n  if (loading && leaderboards.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaderboard-widget\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading leaderboards...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaderboard-widget\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: fetchLeaderboards,\n          className: \"retry-btn\",\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this);\n  }\n  if (compact && selectedLeaderboard) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaderboard-widget compact\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [getLeaderboardIcon(selectedLeaderboard.type), \" \", selectedLeaderboard.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"period-label\",\n          children: getPeriodLabel(selectedLeaderboard.period)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard-list\",\n        children: leaderboardData.slice(0, 5).map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leaderboard-entry compact\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rank\",\n            style: {\n              color: getRankColor(entry.rank)\n            },\n            children: getRankIcon(entry.rank)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"username\",\n              children: entry.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"score\",\n            children: formatValue(entry.value, selectedLeaderboard.type)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this)]\n        }, entry.userId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), userPosition && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-position\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Your Position: #\", userPosition.rank]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"leaderboard-widget\",\n    children: [showAllLeaderboards && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaderboard-tabs\",\n      children: leaderboards.map(leaderboard => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab-btn ${(selectedLeaderboard === null || selectedLeaderboard === void 0 ? void 0 : selectedLeaderboard.id) === leaderboard.id ? 'active' : ''}`,\n        onClick: () => setSelectedLeaderboard(leaderboard),\n        children: [getLeaderboardIcon(leaderboard.type), \" \", leaderboard.name]\n      }, leaderboard.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }, this), selectedLeaderboard && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaderboard-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leaderboard-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [getLeaderboardIcon(selectedLeaderboard.type), \" \", selectedLeaderboard.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"leaderboard-description\",\n            children: selectedLeaderboard.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-meta\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"period-badge\",\n            children: getPeriodLabel(selectedLeaderboard.period)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"entries-count\",\n            children: [leaderboardData.length, \" entries\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading leaderboard...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leaderboard-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-rank\",\n              children: \"Rank\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-user\",\n              children: \"User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-score\",\n              children: \"Score\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-change\",\n              children: \"Change\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-body\",\n            children: leaderboardData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `leaderboard-entry ${entry.isCurrentUser ? 'current-user' : ''}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"rank\",\n                style: {\n                  color: getRankColor(entry.rank)\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"rank-icon\",\n                  children: getRankIcon(entry.rank)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"user-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"username\",\n                    children: entry.username\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 53\n                  }, this), entry.isCurrentUser && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"you-badge\",\n                    children: \"You\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 258,\n                    columnNumber: 57\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 49\n                }, this), entry.userLevel && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"user-level\",\n                  children: [\"Level \", entry.userLevel]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"score\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"score-value\",\n                  children: formatValue(entry.value, selectedLeaderboard.type)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 49\n                }, this), selectedLeaderboard.type === 'xp' && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"score-unit\",\n                  children: \"XP\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"change\",\n                children: entry.change !== undefined && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `change-indicator ${entry.change > 0 ? 'up' : entry.change < 0 ? 'down' : 'same'}`,\n                  children: [entry.change > 0 ? '↗' : entry.change < 0 ? '↘' : '—', entry.change !== 0 && Math.abs(entry.change)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 53\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 45\n              }, this)]\n            }, entry.userId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 29\n        }, this), userPosition && !userPosition.inTopList && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-position-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"position-header\",\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Your Position\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"position-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rank\",\n              style: {\n                color: getRankColor(userPosition.rank)\n              },\n              children: [\"#\", userPosition.rank]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-info\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"username\",\n                children: userPosition.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 296,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"score\",\n              children: formatValue(userPosition.value, selectedLeaderboard.type)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leaderboard-footer\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"update-info\",\n            children: [\"Last updated: \", new Date(selectedLeaderboard.lastUpdated || Date.now()).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => fetchLeaderboardData(selectedLeaderboard.id),\n            className: \"refresh-btn\",\n            children: \"\\uD83D\\uDD04 Refresh\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 9\n  }, this);\n};\n_s(LeaderboardWidget, \"sDHriLUKo5hwc1OCHml2Ec/H68I=\");\n_c = LeaderboardWidget;\nexport default LeaderboardWidget;\nvar _c;\n$RefreshReg$(_c, \"LeaderboardWidget\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","LeaderboardWidget","showAllLeaderboards","token","compact","leaderboardId","maxEntries","_s","leaderboards","setLeaderboards","selectedLeaderboard","setSelectedLeaderboard","leaderboardData","setLeaderboardData","loading","setLoading","error","setError","userPosition","setUserPosition","fetchLeaderboards","fetchLeaderboardData","id","response","fetch","headers","ok","data","json","length","defaultBoard","find","lb","console","entries","getRankIcon","rank","getRankColor","formatValue","value","type","toFixed","toString","getLeaderboardIcon","icons","xp","badges","achievements","games","streaks","getPeriodLabel","period","labels","daily","weekly","monthly","all_time","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","name","slice","map","entry","index","style","color","username","userId","leaderboard","description","isCurrentUser","userLevel","change","undefined","Math","abs","inTopList","Date","lastUpdated","now","toLocaleString","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/components/LeaderboardWidget.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/LeaderboardWidget.css';\r\n\r\nconst LeaderboardWidget = ({ \r\n    showAllLeaderboards = false, \r\n    token = null, \r\n    compact = false,\r\n    leaderboardId = null,\r\n    maxEntries = 10\r\n}) => {\r\n    const [leaderboards, setLeaderboards] = useState([]);\r\n    const [selectedLeaderboard, setSelectedLeaderboard] = useState(null);\r\n    const [leaderboardData, setLeaderboardData] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [userPosition, setUserPosition] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            fetchLeaderboards();\r\n        }\r\n    }, [token]);\r\n\r\n    useEffect(() => {\r\n        if (selectedLeaderboard && token) {\r\n            fetchLeaderboardData(selectedLeaderboard.id);\r\n        }\r\n    }, [selectedLeaderboard, token]);\r\n\r\n    const fetchLeaderboards = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/gamification/leaderboards', {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`,\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setLeaderboards(data.data || []);\r\n                \r\n                // Auto-select first leaderboard or specified one\r\n                if (data.data && data.data.length > 0) {\r\n                    const defaultBoard = leaderboardId \r\n                        ? data.data.find(lb => lb.id === leaderboardId) \r\n                        : data.data[0];\r\n                    if (defaultBoard) {\r\n                        setSelectedLeaderboard(defaultBoard);\r\n                    }\r\n                }\r\n            } else {\r\n                setError('Failed to load leaderboards');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching leaderboards:', error);\r\n            setError('Failed to connect to server');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchLeaderboardData = async (leaderboardId) => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(\r\n                `http://localhost:5000/api/gamification/leaderboards/${leaderboardId}?limit=${maxEntries}`,\r\n                {\r\n                    headers: {\r\n                        'Authorization': `Bearer ${token}`,\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                }\r\n            );\r\n\r\n            if (response.ok) {\r\n                const data = await response.json();\r\n                setLeaderboardData(data.data.entries || []);\r\n                setUserPosition(data.data.userPosition || null);\r\n            } else {\r\n                setError('Failed to load leaderboard data');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching leaderboard data:', error);\r\n            setError('Failed to connect to server');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const getRankIcon = (rank) => {\r\n        switch (rank) {\r\n            case 1: return '🥇';\r\n            case 2: return '🥈';\r\n            case 3: return '🥉';\r\n            default: return `#${rank}`;\r\n        }\r\n    };\r\n\r\n    const getRankColor = (rank) => {\r\n        switch (rank) {\r\n            case 1: return '#FFD700';\r\n            case 2: return '#C0C0C0';\r\n            case 3: return '#CD7F32';\r\n            default: return '#666';\r\n        }\r\n    };\r\n\r\n    const formatValue = (value, type) => {\r\n        if (type === 'xp') {\r\n            if (value >= 1000000) return `${(value / 1000000).toFixed(1)}M`;\r\n            if (value >= 1000) return `${(value / 1000).toFixed(1)}K`;\r\n            return value.toString();\r\n        }\r\n        return value;\r\n    };\r\n\r\n    const getLeaderboardIcon = (type) => {\r\n        const icons = {\r\n            xp: '⭐',\r\n            badges: '🏅',\r\n            achievements: '🏆',\r\n            games: '🎮',\r\n            streaks: '🔥'\r\n        };\r\n        return icons[type] || '📊';\r\n    };\r\n\r\n    const getPeriodLabel = (period) => {\r\n        const labels = {\r\n            daily: 'Today',\r\n            weekly: 'This Week',\r\n            monthly: 'This Month',\r\n            all_time: 'All Time'\r\n        };\r\n        return labels[period] || period;\r\n    };\r\n\r\n    if (loading && leaderboards.length === 0) {\r\n        return (\r\n            <div className=\"leaderboard-widget\">\r\n                <div className=\"loading-container\">\r\n                    <div className=\"loading-spinner\"></div>\r\n                    <p>Loading leaderboards...</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"leaderboard-widget\">\r\n                <div className=\"error-container\">\r\n                    <p className=\"error-message\">{error}</p>\r\n                    <button onClick={fetchLeaderboards} className=\"retry-btn\">\r\n                        Try Again\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (compact && selectedLeaderboard) {\r\n        return (\r\n            <div className=\"leaderboard-widget compact\">\r\n                <div className=\"leaderboard-header\">\r\n                    <h3>\r\n                        {getLeaderboardIcon(selectedLeaderboard.type)} {selectedLeaderboard.name}\r\n                    </h3>\r\n                    <span className=\"period-label\">{getPeriodLabel(selectedLeaderboard.period)}</span>\r\n                </div>\r\n                \r\n                <div className=\"leaderboard-list\">\r\n                    {leaderboardData.slice(0, 5).map((entry, index) => (\r\n                        <div key={entry.userId} className=\"leaderboard-entry compact\">\r\n                            <div className=\"rank\" style={{ color: getRankColor(entry.rank) }}>\r\n                                {getRankIcon(entry.rank)}\r\n                            </div>\r\n                            <div className=\"user-info\">\r\n                                <span className=\"username\">{entry.username}</span>\r\n                            </div>\r\n                            <div className=\"score\">\r\n                                {formatValue(entry.value, selectedLeaderboard.type)}\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n\r\n                {userPosition && (\r\n                    <div className=\"user-position\">\r\n                        <span>Your Position: #{userPosition.rank}</span>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"leaderboard-widget\">\r\n            {showAllLeaderboards && (\r\n                <div className=\"leaderboard-tabs\">\r\n                    {leaderboards.map((leaderboard) => (\r\n                        <button\r\n                            key={leaderboard.id}\r\n                            className={`tab-btn ${selectedLeaderboard?.id === leaderboard.id ? 'active' : ''}`}\r\n                            onClick={() => setSelectedLeaderboard(leaderboard)}\r\n                        >\r\n                            {getLeaderboardIcon(leaderboard.type)} {leaderboard.name}\r\n                        </button>\r\n                    ))}\r\n                </div>\r\n            )}\r\n\r\n            {selectedLeaderboard && (\r\n                <div className=\"leaderboard-content\">\r\n                    <div className=\"leaderboard-header\">\r\n                        <div className=\"header-info\">\r\n                            <h2>\r\n                                {getLeaderboardIcon(selectedLeaderboard.type)} {selectedLeaderboard.name}\r\n                            </h2>\r\n                            <p className=\"leaderboard-description\">{selectedLeaderboard.description}</p>\r\n                        </div>\r\n                        <div className=\"header-meta\">\r\n                            <span className=\"period-badge\">{getPeriodLabel(selectedLeaderboard.period)}</span>\r\n                            <span className=\"entries-count\">{leaderboardData.length} entries</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {loading ? (\r\n                        <div className=\"loading-container\">\r\n                            <div className=\"loading-spinner\"></div>\r\n                            <p>Loading leaderboard...</p>\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            <div className=\"leaderboard-table\">\r\n                                <div className=\"table-header\">\r\n                                    <div className=\"header-rank\">Rank</div>\r\n                                    <div className=\"header-user\">User</div>\r\n                                    <div className=\"header-score\">Score</div>\r\n                                    <div className=\"header-change\">Change</div>\r\n                                </div>\r\n                                \r\n                                <div className=\"table-body\">\r\n                                    {leaderboardData.map((entry, index) => (\r\n                                        <div \r\n                                            key={entry.userId} \r\n                                            className={`leaderboard-entry ${entry.isCurrentUser ? 'current-user' : ''}`}\r\n                                        >\r\n                                            <div className=\"rank\" style={{ color: getRankColor(entry.rank) }}>\r\n                                                <span className=\"rank-icon\">{getRankIcon(entry.rank)}</span>\r\n                                            </div>\r\n                                            <div className=\"user-info\">\r\n                                                <div className=\"user-details\">\r\n                                                    <span className=\"username\">{entry.username}</span>\r\n                                                    {entry.isCurrentUser && (\r\n                                                        <span className=\"you-badge\">You</span>\r\n                                                    )}\r\n                                                </div>\r\n                                                {entry.userLevel && (\r\n                                                    <span className=\"user-level\">Level {entry.userLevel}</span>\r\n                                                )}\r\n                                            </div>\r\n                                            <div className=\"score\">\r\n                                                <span className=\"score-value\">\r\n                                                    {formatValue(entry.value, selectedLeaderboard.type)}\r\n                                                </span>\r\n                                                {selectedLeaderboard.type === 'xp' && (\r\n                                                    <span className=\"score-unit\">XP</span>\r\n                                                )}\r\n                                            </div>\r\n                                            <div className=\"change\">\r\n                                                {entry.change !== undefined && (\r\n                                                    <span className={`change-indicator ${entry.change > 0 ? 'up' : entry.change < 0 ? 'down' : 'same'}`}>\r\n                                                        {entry.change > 0 ? '↗' : entry.change < 0 ? '↘' : '—'}\r\n                                                        {entry.change !== 0 && Math.abs(entry.change)}\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {userPosition && !userPosition.inTopList && (\r\n                                <div className=\"user-position-card\">\r\n                                    <div className=\"position-header\">\r\n                                        <h4>Your Position</h4>\r\n                                    </div>\r\n                                    <div className=\"position-content\">\r\n                                        <div className=\"rank\" style={{ color: getRankColor(userPosition.rank) }}>\r\n                                            #{userPosition.rank}\r\n                                        </div>\r\n                                        <div className=\"user-info\">\r\n                                            <span className=\"username\">{userPosition.username}</span>\r\n                                        </div>\r\n                                        <div className=\"score\">\r\n                                            {formatValue(userPosition.value, selectedLeaderboard.type)}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className=\"leaderboard-footer\">\r\n                                <p className=\"update-info\">\r\n                                    Last updated: {new Date(selectedLeaderboard.lastUpdated || Date.now()).toLocaleString()}\r\n                                </p>\r\n                                <button \r\n                                    onClick={() => fetchLeaderboardData(selectedLeaderboard.id)}\r\n                                    className=\"refresh-btn\"\r\n                                >\r\n                                    🔄 Refresh\r\n                                </button>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LeaderboardWidget;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}