{"ast":null,"code":"var _s = $RefreshSig$();\n// Fichier: src/hooks/useAgoraLive.js\n// VERSION CORRIGÉE - Résout les problèmes audio/vidéo bidirectionnels\n\nimport { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport AgoraRTC from 'agora-rtc-sdk-ng';\nimport { getAgoraAppId, generateUID, generateChannelName } from '../config/agora';\nexport const useAgoraLive = (sessionId, user, isTeacher = false) => {\n  _s();\n  // IMPORTANT: Mémoriser les paramètres pour éviter les recréations\n  const memoizedSessionId = useMemo(() => sessionId, [sessionId]);\n  const memoizedUserId = useMemo(() => user === null || user === void 0 ? void 0 : user.id, [user === null || user === void 0 ? void 0 : user.id]);\n  const memoizedIsTeacher = useMemo(() => Boolean(isTeacher), [isTeacher]);\n\n  // LOG UNIQUE\n  const loggedRef = useRef(false);\n  if (!loggedRef.current) {\n    console.log('🎬 useAgoraLive - INITIALISATION UNIQUE', {\n      sessionId: memoizedSessionId,\n      userId: memoizedUserId,\n      isTeacher: memoizedIsTeacher\n    });\n    loggedRef.current = true;\n  }\n\n  // Client Agora - CRÉÉ UNE SEULE FOIS\n  const clientRef = useRef(null);\n  const [clientReady, setClientReady] = useState(false);\n\n  // États des tracks locaux\n  const [localVideoTrack, setLocalVideoTrack] = useState(null);\n  const [localAudioTrack, setLocalAudioTrack] = useState(null);\n  const [screenTrack, setScreenTrack] = useState(null);\n\n  // États des utilisateurs distants\n  const [remoteUsers, setRemoteUsers] = useState([]);\n\n  // États de connexion\n  const [isJoined, setIsJoined] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionError, setConnectionError] = useState(null);\n\n  // États des contrôles\n  const [isVideoEnabled, setIsVideoEnabled] = useState(false);\n  const [isAudioEnabled, setIsAudioEnabled] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n\n  // NOUVEAU: État pour l'autoplay audio\n  const [audioAutoplayBlocked, setAudioAutoplayBlocked] = useState(false);\n\n  // Statistiques\n  const [networkQuality, setNetworkQuality] = useState(0);\n  const [participantCount, setParticipantCount] = useState(0);\n\n  // Refs pour éviter les doublons\n  const isJoiningRef = useRef(false);\n  const localUidRef = useRef(null);\n  const eventsConfiguredRef = useRef(false);\n  const pendingAudioTracks = useRef(new Map()); // NOUVEAU: Pour stocker les tracks audio en attente\n\n  // Nom du canal généré une seule fois\n  const channelName = useMemo(() => {\n    return memoizedSessionId ? generateChannelName(memoizedSessionId) : null;\n  }, [memoizedSessionId]);\n\n  // ==========================================\n  // FONCTION POUR GÉRER L'AUTOPLAY AUDIO - NOUVEAU\n  // ==========================================\n  const tryPlayAudio = useCallback(async (audioTrack, uid) => {\n    try {\n      audioTrack.setVolume(100);\n      await audioTrack.play();\n      console.log('✅ Audio en lecture pour:', uid);\n\n      // Retirer des tracks en attente si succès\n      pendingAudioTracks.current.delete(uid);\n      setAudioAutoplayBlocked(false);\n      return true;\n    } catch (error) {\n      console.warn('⚠️ Autoplay audio bloqué pour:', uid, error.message);\n\n      // Stocker pour lecture ultérieure\n      pendingAudioTracks.current.set(uid, audioTrack);\n      setAudioAutoplayBlocked(true);\n      return false;\n    }\n  }, []);\n\n  // NOUVEAU: Fonction pour débloquer l'audio après interaction utilisateur\n  const enableAudioPlayback = useCallback(async () => {\n    console.log('🔓 Tentative déblocage audio autoplay...');\n\n    // Essayer de jouer tous les tracks en attente\n    for (const [uid, audioTrack] of pendingAudioTracks.current) {\n      const success = await tryPlayAudio(audioTrack, uid);\n      if (success) {\n        console.log('✅ Audio débloqué pour:', uid);\n      }\n    }\n\n    // Si tous ont été débloqués, réinitialiser l'état\n    if (pendingAudioTracks.current.size === 0) {\n      setAudioAutoplayBlocked(false);\n    }\n  }, [tryPlayAudio]);\n\n  // ==========================================\n  // CRÉATION DU CLIENT AGORA - OPTIMISÉ\n  // ==========================================\n\n  useEffect(() => {\n    if (clientRef.current || !memoizedSessionId) return;\n    console.log('🔧 Création client Agora UNIQUE...');\n    try {\n      // Configuration debug\n      if (process.env.NODE_ENV === 'development') {\n        AgoraRTC.setLogLevel(4);\n      } else {\n        AgoraRTC.setLogLevel(2);\n      }\n\n      // CONFIGURATION OPTIMISÉE pour audio/vidéo bidirectionnels\n      const client = AgoraRTC.createClient({\n        mode: 'rtc',\n        codec: 'vp8',\n        // VP8 plus stable\n        role: 'host' // IMPORTANT: Tout le monde en host pour bidirectionnalité\n      });\n\n      // PARAMÈTRES GLOBAUX pour améliorer la qualité\n      try {\n        AgoraRTC.setParameter('AUDIO_VOLUME', 100);\n        AgoraRTC.setParameter('AUDIO_PROFILE', 'music_standard');\n      } catch (paramError) {\n        console.warn('⚠️ Paramètres globaux non supportés:', paramError);\n      }\n      clientRef.current = client;\n      setClientReady(true);\n      console.log('✅ Client Agora créé avec succès - Configuration optimisée');\n    } catch (error) {\n      console.error('❌ Erreur création client Agora:', error);\n    }\n\n    // Cleanup lors du démontage\n    return () => {\n      if (clientRef.current) {\n        console.log('🧹 Nettoyage client Agora...');\n        try {\n          clientRef.current.removeAllListeners();\n          clientRef.current = null;\n        } catch (error) {\n          console.error('Erreur nettoyage client:', error);\n        }\n      }\n    };\n  }, [memoizedSessionId]);\n\n  // ==========================================\n  // CONFIGURATION DES ÉVÉNEMENTS AGORA - CORRIGÉE\n  // ==========================================\n\n  useEffect(() => {\n    if (!clientRef.current || !clientReady || eventsConfiguredRef.current) {\n      return;\n    }\n    console.log('🔧 Configuration événements Agora UNIQUE...');\n    eventsConfiguredRef.current = true;\n    const client = clientRef.current;\n\n    // ÉVÉNEMENT CORRIGÉ: Utilisateur publié\n    const handleUserPublished = async (remoteUser, mediaType) => {\n      try {\n        console.log('👤 User published:', remoteUser.uid, mediaType);\n        await client.subscribe(remoteUser, mediaType);\n        console.log('✅ Subscribed to', remoteUser.uid, mediaType);\n\n        // CORRECTION CRITIQUE: Gestion de l'audio avec autoplay\n        if (mediaType === 'audio' && remoteUser.audioTrack) {\n          console.log('🔊 TENTATIVE LECTURE AUDIO BIDIRECTIONNELLE pour:', remoteUser.uid);\n\n          // Utiliser la nouvelle fonction qui gère l'autoplay\n          await tryPlayAudio(remoteUser.audioTrack, remoteUser.uid);\n        }\n\n        // Préparer la vidéo\n        if (mediaType === 'video' && remoteUser.videoTrack) {\n          console.log('🎥 Vidéo distante prête pour:', remoteUser.uid);\n        }\n        setRemoteUsers(prevUsers => {\n          const userIndex = prevUsers.findIndex(u => u.uid === remoteUser.uid);\n          if (userIndex !== -1) {\n            const updatedUsers = [...prevUsers];\n            updatedUsers[userIndex] = {\n              ...updatedUsers[userIndex],\n              [mediaType + 'Track']: remoteUser[mediaType + 'Track'],\n              hasVideo: mediaType === 'video' ? true : updatedUsers[userIndex].hasVideo,\n              hasAudio: mediaType === 'audio' ? true : updatedUsers[userIndex].hasAudio\n            };\n            return updatedUsers;\n          } else {\n            return [...prevUsers, {\n              uid: remoteUser.uid,\n              [mediaType + 'Track']: remoteUser[mediaType + 'Track'],\n              hasVideo: mediaType === 'video',\n              hasAudio: mediaType === 'audio',\n              joinTime: new Date(),\n              name: `Participant ${remoteUser.uid}`\n            }];\n          }\n        });\n      } catch (error) {\n        console.error('❌ Erreur souscription:', error);\n      }\n    };\n    const handleUserUnpublished = (remoteUser, mediaType) => {\n      console.log('👤 User unpublished:', remoteUser.uid, mediaType);\n\n      // NOUVEAU: Nettoyer les tracks audio en attente\n      if (mediaType === 'audio') {\n        pendingAudioTracks.current.delete(remoteUser.uid);\n      }\n      setRemoteUsers(prevUsers => prevUsers.map(user => user.uid === remoteUser.uid ? {\n        ...user,\n        [mediaType + 'Track']: null,\n        hasVideo: mediaType === 'video' ? false : user.hasVideo,\n        hasAudio: mediaType === 'audio' ? false : user.hasAudio\n      } : user));\n    };\n    const handleUserJoined = remoteUser => {\n      console.log('👋 User joined:', remoteUser.uid);\n      setParticipantCount(prev => prev + 1);\n    };\n    const handleUserLeft = (remoteUser, reason) => {\n      console.log('👋 User left:', remoteUser.uid, reason);\n\n      // NOUVEAU: Nettoyer les tracks audio en attente\n      pendingAudioTracks.current.delete(remoteUser.uid);\n      setRemoteUsers(prevUsers => prevUsers.filter(user => user.uid !== remoteUser.uid));\n      setParticipantCount(prev => Math.max(0, prev - 1));\n    };\n    const handleNetworkQuality = stats => {\n      setNetworkQuality(stats.uplinkNetworkQuality || 0);\n    };\n    const handleConnectionStateChange = (currentState, prevState, reason) => {\n      console.log('🔗 Connection state:', currentState, 'reason:', reason);\n      if (currentState === 'DISCONNECTED') {\n        if (reason && reason.includes('LEAVE')) {\n          console.log('✅ Normal disconnection (user left)');\n          setConnectionError(null);\n        } else {\n          setConnectionError('Connexion perdue');\n        }\n        setIsJoined(false);\n      } else if (currentState === 'CONNECTED') {\n        setConnectionError(null);\n        setIsJoined(true);\n      }\n    };\n    const handleException = evt => {\n      console.error('🚨 Agora Exception:', evt);\n\n      // Ignorer les erreurs de bitrate trop faibles (elles sont normales)\n      if (evt.code === 2003 || evt.code === 1003 || evt.code === 2001) {\n        console.log('⚠️ Bitrate warning ignoré:', evt.msg);\n        return;\n      }\n      if (evt.code === 'CAN_NOT_GET_GATEWAY_SERVER') {\n        setConnectionError('Erreur de configuration Agora. Vérifiez votre App ID.');\n      } else if (evt.code === 'INVALID_VENDOR_KEY') {\n        setConnectionError('App ID Agora invalide.');\n      } else {\n        console.warn('Agora warning:', evt.msg || evt.code);\n      }\n    };\n\n    // Enregistrer les événements\n    client.on('user-published', handleUserPublished);\n    client.on('user-unpublished', handleUserUnpublished);\n    client.on('user-joined', handleUserJoined);\n    client.on('user-left', handleUserLeft);\n    client.on('network-quality', handleNetworkQuality);\n    client.on('connection-state-change', handleConnectionStateChange);\n    client.on('exception', handleException);\n    console.log('✅ Événements Agora configurés');\n\n    // Cleanup des événements\n    return () => {\n      console.log('🧹 Nettoyage événements Agora...');\n      if (client) {\n        client.removeAllListeners();\n      }\n      eventsConfiguredRef.current = false;\n    };\n  }, [clientReady, tryPlayAudio]);\n\n  // ==========================================\n  // REJOINDRE LE CANAL - CORRIGÉ TIMING\n  // ==========================================\n\n  const joinChannel = useCallback(async () => {\n    if (isJoiningRef.current || isJoined || !clientRef.current || !channelName || !memoizedUserId) {\n      console.log('⚠️ Already joining/joined or missing requirements');\n      return;\n    }\n    try {\n      isJoiningRef.current = true;\n      setIsConnecting(true);\n      setConnectionError(null);\n      console.log('🔗 Starting join process...');\n      const appId = getAgoraAppId();\n      const uid = generateUID(memoizedUserId);\n      console.log('📋 Join parameters:', {\n        appId: appId.substring(0, 8) + '...',\n        channelName,\n        uid,\n        userRole: memoizedIsTeacher ? 'teacher' : 'student'\n      });\n      console.log('🔄 Attempting to join channel...');\n      const assignedUid = await clientRef.current.join(appId, channelName, null, uid);\n      console.log('✅ Successfully joined channel with UID:', assignedUid);\n      localUidRef.current = assignedUid;\n\n      // CORRECTION: Mettre à jour l'état AVANT l'activation des médias\n      setIsJoined(true);\n      setParticipantCount(1);\n\n      // CORRECTION: Attendre que l'état soit à jour, puis activer les médias\n      if (memoizedIsTeacher) {\n        console.log('👨‍🏫 Teacher detected, enabling media...');\n        try {\n          // Activer avec un délai pour s'assurer que isJoined est à jour\n          setTimeout(async () => {\n            try {\n              await enableCamera();\n              await new Promise(resolve => setTimeout(resolve, 500));\n              await enableAudio();\n              console.log('✅ Médias professeur activés avec succès');\n            } catch (mediaError) {\n              console.warn('⚠️ Failed to auto-enable media:', mediaError);\n            }\n          }, 300);\n        } catch (mediaError) {\n          console.warn('⚠️ Failed to auto-enable media:', mediaError);\n        }\n      }\n    } catch (error) {\n      console.error('❌ Failed to join channel:', error);\n      let errorMessage = 'Impossible de rejoindre la session';\n      if (error.code === 'CAN_NOT_GET_GATEWAY_SERVER') {\n        errorMessage = 'Erreur de serveur Agora. Vérifiez votre App ID et votre connexion.';\n      } else if (error.code === 'INVALID_VENDOR_KEY') {\n        errorMessage = 'App ID Agora invalide. Vérifiez votre configuration.';\n      } else if (error.code === 'DYNAMIC_USE_STATIC_KEY') {\n        errorMessage = 'Erreur de token. Contactez l\\'administrateur.';\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      setConnectionError(errorMessage);\n      throw error;\n    } finally {\n      setIsConnecting(false);\n      isJoiningRef.current = false;\n    }\n  }, [memoizedUserId, memoizedIsTeacher, isJoined, channelName]);\n\n  // ==========================================\n  // GESTION CAMÉRA - CORRIGÉE TIMING PUBLICATION\n  // ==========================================\n\n  const enableCamera = useCallback(async () => {\n    try {\n      if (localVideoTrack) {\n        console.warn('⚠️ Video already enabled');\n        return;\n      }\n      console.log('📹 Enabling camera...');\n\n      // PARAMÈTRES VIDÉO OPTIMISÉS\n      const videoTrack = await AgoraRTC.createCameraVideoTrack({\n        optimizationMode: 'motion',\n        encoderConfig: {\n          width: 640,\n          height: 480,\n          frameRate: 15,\n          bitrateMax: 1000,\n          bitrateMin: 300\n        }\n      });\n      setLocalVideoTrack(videoTrack);\n      setIsVideoEnabled(true);\n\n      // CORRECTION: Publier immédiatement si on est connecté\n      if (clientRef.current && localUidRef.current) {\n        try {\n          await clientRef.current.publish(videoTrack);\n          console.log('✅ Video track published immediately');\n        } catch (publishError) {\n          console.warn('⚠️ Publish video failed, will retry:', publishError);\n\n          // Retry après un délai\n          setTimeout(async () => {\n            try {\n              if (clientRef.current && videoTrack) {\n                await clientRef.current.publish(videoTrack);\n                console.log('✅ Video track published on retry');\n              }\n            } catch (retryError) {\n              console.error('❌ Video publish retry failed:', retryError);\n            }\n          }, 1000);\n        }\n      }\n      console.log('✅ Camera enabled');\n    } catch (error) {\n      console.error('❌ Failed to enable camera:', error);\n      if (error.name === 'NotAllowedError') {\n        setConnectionError('Permission caméra refusée. Veuillez autoriser l\\'accès à la caméra.');\n      } else if (error.name === 'NotFoundError') {\n        setConnectionError('Aucune caméra trouvée sur cet appareil.');\n      } else {\n        setConnectionError('Impossible d\\'accéder à la caméra');\n      }\n      throw error;\n    }\n  }, [localVideoTrack]);\n  const disableCamera = useCallback(async () => {\n    try {\n      if (!localVideoTrack) return;\n      console.log('📹 Disabling camera...');\n      if (clientRef.current && localUidRef.current) {\n        try {\n          await clientRef.current.unpublish(localVideoTrack);\n          console.log('✅ Video track unpublished');\n        } catch (unpublishError) {\n          console.warn('⚠️ Video unpublish failed:', unpublishError);\n        }\n      }\n      localVideoTrack.stop();\n      localVideoTrack.close();\n      setLocalVideoTrack(null);\n      setIsVideoEnabled(false);\n      console.log('✅ Camera disabled');\n    } catch (error) {\n      console.error('❌ Failed to disable camera:', error);\n    }\n  }, [localVideoTrack]);\n\n  // ==========================================\n  // GESTION AUDIO - CORRIGÉE TIMING PUBLICATION\n  // ==========================================\n\n  const enableAudio = useCallback(async () => {\n    try {\n      if (localAudioTrack) {\n        console.warn('⚠️ Audio already enabled');\n        return;\n      }\n      console.log('🎤 Enabling audio...');\n\n      // PARAMÈTRES AUDIO OPTIMISÉS pour BIDIRECTIONNALITÉ\n      const audioTrack = await AgoraRTC.createMicrophoneAudioTrack({\n        encoderConfig: {\n          sampleRate: 48000,\n          // Haute qualité\n          stereo: false,\n          // Mono plus stable pour la voix\n          bitrate: 128 // Bitrate plus élevé pour meilleure qualité\n        },\n        ANS: true,\n        // Suppression de bruit activée\n        AEC: true,\n        // Annulation d'écho CRITIQUE\n        AGC: true,\n        // Contrôle automatique du gain\n        bypassWebAudio: false,\n        // Utiliser WebAudio pour compatibilité\n        volume: 100 // Volume au maximum\n      });\n\n      // IMPORTANT: Régler le volume dès la création\n      audioTrack.setVolume(100);\n      setLocalAudioTrack(audioTrack);\n      setIsAudioEnabled(true);\n      setIsMuted(false);\n\n      // CORRECTION: Publier immédiatement si on est connecté\n      if (clientRef.current && localUidRef.current) {\n        try {\n          await clientRef.current.publish(audioTrack);\n          console.log('✅ Audio track published immediately');\n        } catch (publishError) {\n          console.warn('⚠️ Publish audio failed, will retry:', publishError);\n\n          // Retry après un délai\n          setTimeout(async () => {\n            try {\n              if (clientRef.current && audioTrack) {\n                await clientRef.current.publish(audioTrack);\n                console.log('✅ Audio track published on retry');\n              }\n            } catch (retryError) {\n              console.error('❌ Audio publish retry failed:', retryError);\n            }\n          }, 1000);\n        }\n      }\n      console.log('✅ Audio enabled with optimized settings');\n    } catch (error) {\n      console.error('❌ Failed to enable audio:', error);\n      if (error.name === 'NotAllowedError') {\n        setConnectionError('Permission microphone refusée. Veuillez autoriser l\\'accès au microphone.');\n      } else if (error.name === 'NotFoundError') {\n        setConnectionError('Aucun microphone trouvé sur cet appareil.');\n      } else {\n        setConnectionError('Impossible d\\'accéder au microphone');\n      }\n      throw error;\n    }\n  }, [localAudioTrack]);\n  const disableAudio = useCallback(async () => {\n    try {\n      if (!localAudioTrack) return;\n      console.log('🎤 Disabling audio...');\n      if (clientRef.current && localUidRef.current) {\n        try {\n          await clientRef.current.unpublish(localAudioTrack);\n          console.log('✅ Audio track unpublished');\n        } catch (unpublishError) {\n          console.warn('⚠️ Audio unpublish failed:', unpublishError);\n        }\n      }\n      localAudioTrack.stop();\n      localAudioTrack.close();\n      setLocalAudioTrack(null);\n      setIsAudioEnabled(false);\n      setIsMuted(false);\n      console.log('✅ Audio disabled');\n    } catch (error) {\n      console.error('❌ Failed to disable audio:', error);\n    }\n  }, [localAudioTrack]);\n\n  // ==========================================\n  // COUPER/RÉTABLIR LE SON\n  // ==========================================\n\n  const toggleMute = useCallback(async () => {\n    if (!localAudioTrack) return;\n    try {\n      const newMutedState = !isMuted;\n      await localAudioTrack.setEnabled(!newMutedState);\n      setIsMuted(newMutedState);\n      console.log(newMutedState ? '🔇 Audio muted' : '🔊 Audio unmuted');\n    } catch (error) {\n      console.error('❌ Failed to toggle mute:', error);\n    }\n  }, [localAudioTrack, isMuted]);\n\n  // ==========================================\n  // QUITTER LE CANAL\n  // ==========================================\n\n  const leaveChannel = useCallback(async () => {\n    try {\n      console.log('🚪 Leaving channel...');\n      await disableCamera();\n      await disableAudio();\n      await stopScreenShare();\n      if (isJoined && clientRef.current) {\n        await clientRef.current.leave();\n        console.log('✅ Left channel successfully');\n      }\n      setIsJoined(false);\n      setRemoteUsers([]);\n      setParticipantCount(0);\n      setConnectionError(null);\n      setAudioAutoplayBlocked(false);\n      localUidRef.current = null;\n      pendingAudioTracks.current.clear();\n    } catch (error) {\n      console.error('❌ Failed to leave channel:', error);\n    }\n  }, [isJoined]);\n\n  // ==========================================\n  // PARTAGE D'ÉCRAN (inchangé)\n  // ==========================================\n\n  const startScreenShare = useCallback(async () => {\n    try {\n      if (screenTrack || !memoizedIsTeacher) return;\n      console.log('🖥️ Starting screen share...');\n      const screenVideoTrack = await AgoraRTC.createScreenVideoTrack({\n        optimizationMode: 'detail',\n        encoderConfig: {\n          width: 1280,\n          height: 720,\n          frameRate: 10,\n          bitrateMax: 2000,\n          bitrateMin: 800\n        }\n      });\n      if (localVideoTrack && isJoined && clientRef.current) {\n        await clientRef.current.unpublish(localVideoTrack);\n      }\n      setScreenTrack(screenVideoTrack);\n      setIsScreenSharing(true);\n      if (isJoined && clientRef.current) {\n        await clientRef.current.publish(screenVideoTrack);\n      }\n      screenVideoTrack.on('track-ended', () => {\n        console.log('🖥️ Screen share ended by user');\n        stopScreenShare();\n      });\n      console.log('✅ Screen sharing started');\n    } catch (error) {\n      console.error('❌ Failed to start screen share:', error);\n      setConnectionError('Impossible de partager l\\'écran');\n      throw error;\n    }\n  }, [screenTrack, memoizedIsTeacher, localVideoTrack, isJoined]);\n  const stopScreenShare = useCallback(async () => {\n    try {\n      if (!screenTrack) return;\n      console.log('🖥️ Stopping screen share...');\n      if (isJoined && clientRef.current) {\n        await clientRef.current.unpublish(screenTrack);\n      }\n      screenTrack.stop();\n      screenTrack.close();\n      setScreenTrack(null);\n      setIsScreenSharing(false);\n      if (localVideoTrack && isJoined && clientRef.current) {\n        await clientRef.current.publish(localVideoTrack);\n      }\n      console.log('✅ Screen sharing stopped');\n    } catch (error) {\n      console.error('❌ Failed to stop screen share:', error);\n    }\n  }, [screenTrack, isJoined, localVideoTrack]);\n  return {\n    // États de connexion\n    isJoined,\n    isConnecting,\n    connectionError,\n    networkQuality,\n    participantCount,\n    // États des médias\n    isVideoEnabled,\n    isAudioEnabled,\n    isScreenSharing,\n    isMuted,\n    // NOUVEAU: État autoplay\n    audioAutoplayBlocked,\n    // Tracks\n    localVideoTrack,\n    localAudioTrack,\n    screenTrack,\n    remoteUsers,\n    // Actions\n    joinChannel,\n    leaveChannel,\n    enableCamera,\n    disableCamera,\n    enableAudio,\n    disableAudio,\n    toggleMute,\n    startScreenShare,\n    stopScreenShare,\n    // NOUVEAU: Fonction pour débloquer l'audio\n    enableAudioPlayback,\n    // Utilitaires\n    localUid: localUidRef.current,\n    channelName\n  };\n};\n_s(useAgoraLive, \"6imyzrTg4dGEYn7Yl4PuntLcyE8=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useMemo","AgoraRTC","getAgoraAppId","generateUID","generateChannelName","useAgoraLive","sessionId","user","isTeacher","_s","memoizedSessionId","memoizedUserId","id","memoizedIsTeacher","Boolean","loggedRef","current","console","log","userId","clientRef","clientReady","setClientReady","localVideoTrack","setLocalVideoTrack","localAudioTrack","setLocalAudioTrack","screenTrack","setScreenTrack","remoteUsers","setRemoteUsers","isJoined","setIsJoined","isConnecting","setIsConnecting","connectionError","setConnectionError","isVideoEnabled","setIsVideoEnabled","isAudioEnabled","setIsAudioEnabled","isScreenSharing","setIsScreenSharing","isMuted","setIsMuted","audioAutoplayBlocked","setAudioAutoplayBlocked","networkQuality","setNetworkQuality","participantCount","setParticipantCount","isJoiningRef","localUidRef","eventsConfiguredRef","pendingAudioTracks","Map","channelName","tryPlayAudio","audioTrack","uid","setVolume","play","delete","error","warn","message","set","enableAudioPlayback","success","size","process","env","NODE_ENV","setLogLevel","client","createClient","mode","codec","role","setParameter","paramError","removeAllListeners","handleUserPublished","remoteUser","mediaType","subscribe","videoTrack","prevUsers","userIndex","findIndex","u","updatedUsers","hasVideo","hasAudio","joinTime","Date","name","handleUserUnpublished","map","handleUserJoined","prev","handleUserLeft","reason","filter","Math","max","handleNetworkQuality","stats","uplinkNetworkQuality","handleConnectionStateChange","currentState","prevState","includes","handleException","evt","code","msg","on","joinChannel","appId","substring","userRole","assignedUid","join","setTimeout","enableCamera","Promise","resolve","enableAudio","mediaError","errorMessage","createCameraVideoTrack","optimizationMode","encoderConfig","width","height","frameRate","bitrateMax","bitrateMin","publish","publishError","retryError","disableCamera","unpublish","unpublishError","stop","close","createMicrophoneAudioTrack","sampleRate","stereo","bitrate","ANS","AEC","AGC","bypassWebAudio","volume","disableAudio","toggleMute","newMutedState","setEnabled","leaveChannel","stopScreenShare","leave","clear","startScreenShare","screenVideoTrack","createScreenVideoTrack","localUid"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/hooks/useAgoraLive.js"],"sourcesContent":["// Fichier: src/hooks/useAgoraLive.js\r\n// VERSION CORRIGÉE - Résout les problèmes audio/vidéo bidirectionnels\r\n\r\nimport { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport AgoraRTC from 'agora-rtc-sdk-ng';\r\nimport { getAgoraAppId, generateUID, generateChannelName } from '../config/agora';\r\n\r\nexport const useAgoraLive = (sessionId, user, isTeacher = false) => {\r\n    // IMPORTANT: Mémoriser les paramètres pour éviter les recréations\r\n    const memoizedSessionId = useMemo(() => sessionId, [sessionId]);\r\n    const memoizedUserId = useMemo(() => user?.id, [user?.id]);\r\n    const memoizedIsTeacher = useMemo(() => Boolean(isTeacher), [isTeacher]);\r\n\r\n    // LOG UNIQUE\r\n    const loggedRef = useRef(false);\r\n    if (!loggedRef.current) {\r\n        console.log('🎬 useAgoraLive - INITIALISATION UNIQUE', {\r\n            sessionId: memoizedSessionId,\r\n            userId: memoizedUserId,\r\n            isTeacher: memoizedIsTeacher\r\n        });\r\n        loggedRef.current = true;\r\n    }\r\n\r\n    // Client Agora - CRÉÉ UNE SEULE FOIS\r\n    const clientRef = useRef(null);\r\n    const [clientReady, setClientReady] = useState(false);\r\n\r\n    // États des tracks locaux\r\n    const [localVideoTrack, setLocalVideoTrack] = useState(null);\r\n    const [localAudioTrack, setLocalAudioTrack] = useState(null);\r\n    const [screenTrack, setScreenTrack] = useState(null);\r\n\r\n    // États des utilisateurs distants\r\n    const [remoteUsers, setRemoteUsers] = useState([]);\r\n\r\n    // États de connexion\r\n    const [isJoined, setIsJoined] = useState(false);\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n    const [connectionError, setConnectionError] = useState(null);\r\n\r\n    // États des contrôles\r\n    const [isVideoEnabled, setIsVideoEnabled] = useState(false);\r\n    const [isAudioEnabled, setIsAudioEnabled] = useState(false);\r\n    const [isScreenSharing, setIsScreenSharing] = useState(false);\r\n    const [isMuted, setIsMuted] = useState(false);\r\n\r\n    // NOUVEAU: État pour l'autoplay audio\r\n    const [audioAutoplayBlocked, setAudioAutoplayBlocked] = useState(false);\r\n\r\n    // Statistiques\r\n    const [networkQuality, setNetworkQuality] = useState(0);\r\n    const [participantCount, setParticipantCount] = useState(0);\r\n\r\n    // Refs pour éviter les doublons\r\n    const isJoiningRef = useRef(false);\r\n    const localUidRef = useRef(null);\r\n    const eventsConfiguredRef = useRef(false);\r\n    const pendingAudioTracks = useRef(new Map()); // NOUVEAU: Pour stocker les tracks audio en attente\r\n\r\n    // Nom du canal généré une seule fois\r\n    const channelName = useMemo(() => {\r\n        return memoizedSessionId ? generateChannelName(memoizedSessionId) : null;\r\n    }, [memoizedSessionId]);\r\n\r\n    // ==========================================\r\n    // FONCTION POUR GÉRER L'AUTOPLAY AUDIO - NOUVEAU\r\n    // ==========================================\r\n    const tryPlayAudio = useCallback(async (audioTrack, uid) => {\r\n        try {\r\n            audioTrack.setVolume(100);\r\n            await audioTrack.play();\r\n            console.log('✅ Audio en lecture pour:', uid);\r\n\r\n            // Retirer des tracks en attente si succès\r\n            pendingAudioTracks.current.delete(uid);\r\n            setAudioAutoplayBlocked(false);\r\n\r\n            return true;\r\n        } catch (error) {\r\n            console.warn('⚠️ Autoplay audio bloqué pour:', uid, error.message);\r\n\r\n            // Stocker pour lecture ultérieure\r\n            pendingAudioTracks.current.set(uid, audioTrack);\r\n            setAudioAutoplayBlocked(true);\r\n\r\n            return false;\r\n        }\r\n    }, []);\r\n\r\n    // NOUVEAU: Fonction pour débloquer l'audio après interaction utilisateur\r\n    const enableAudioPlayback = useCallback(async () => {\r\n        console.log('🔓 Tentative déblocage audio autoplay...');\r\n\r\n        // Essayer de jouer tous les tracks en attente\r\n        for (const [uid, audioTrack] of pendingAudioTracks.current) {\r\n            const success = await tryPlayAudio(audioTrack, uid);\r\n            if (success) {\r\n                console.log('✅ Audio débloqué pour:', uid);\r\n            }\r\n        }\r\n\r\n        // Si tous ont été débloqués, réinitialiser l'état\r\n        if (pendingAudioTracks.current.size === 0) {\r\n            setAudioAutoplayBlocked(false);\r\n        }\r\n    }, [tryPlayAudio]);\r\n\r\n    // ==========================================\r\n    // CRÉATION DU CLIENT AGORA - OPTIMISÉ\r\n    // ==========================================\r\n\r\n    useEffect(() => {\r\n        if (clientRef.current || !memoizedSessionId) return;\r\n\r\n        console.log('🔧 Création client Agora UNIQUE...');\r\n\r\n        try {\r\n            // Configuration debug\r\n            if (process.env.NODE_ENV === 'development') {\r\n                AgoraRTC.setLogLevel(4);\r\n            } else {\r\n                AgoraRTC.setLogLevel(2);\r\n            }\r\n\r\n            // CONFIGURATION OPTIMISÉE pour audio/vidéo bidirectionnels\r\n            const client = AgoraRTC.createClient({\r\n                mode: 'rtc',\r\n                codec: 'vp8',                    // VP8 plus stable\r\n                role: 'host'                     // IMPORTANT: Tout le monde en host pour bidirectionnalité\r\n            });\r\n\r\n            // PARAMÈTRES GLOBAUX pour améliorer la qualité\r\n            try {\r\n                AgoraRTC.setParameter('AUDIO_VOLUME', 100);\r\n                AgoraRTC.setParameter('AUDIO_PROFILE', 'music_standard');\r\n            } catch (paramError) {\r\n                console.warn('⚠️ Paramètres globaux non supportés:', paramError);\r\n            }\r\n\r\n            clientRef.current = client;\r\n            setClientReady(true);\r\n            console.log('✅ Client Agora créé avec succès - Configuration optimisée');\r\n\r\n        } catch (error) {\r\n            console.error('❌ Erreur création client Agora:', error);\r\n        }\r\n\r\n        // Cleanup lors du démontage\r\n        return () => {\r\n            if (clientRef.current) {\r\n                console.log('🧹 Nettoyage client Agora...');\r\n                try {\r\n                    clientRef.current.removeAllListeners();\r\n                    clientRef.current = null;\r\n                } catch (error) {\r\n                    console.error('Erreur nettoyage client:', error);\r\n                }\r\n            }\r\n        };\r\n    }, [memoizedSessionId]);\r\n\r\n    // ==========================================\r\n    // CONFIGURATION DES ÉVÉNEMENTS AGORA - CORRIGÉE\r\n    // ==========================================\r\n\r\n    useEffect(() => {\r\n        if (!clientRef.current || !clientReady || eventsConfiguredRef.current) {\r\n            return;\r\n        }\r\n\r\n        console.log('🔧 Configuration événements Agora UNIQUE...');\r\n        eventsConfiguredRef.current = true;\r\n\r\n        const client = clientRef.current;\r\n\r\n        // ÉVÉNEMENT CORRIGÉ: Utilisateur publié\r\n        const handleUserPublished = async (remoteUser, mediaType) => {\r\n            try {\r\n                console.log('👤 User published:', remoteUser.uid, mediaType);\r\n\r\n                await client.subscribe(remoteUser, mediaType);\r\n                console.log('✅ Subscribed to', remoteUser.uid, mediaType);\r\n\r\n                // CORRECTION CRITIQUE: Gestion de l'audio avec autoplay\r\n                if (mediaType === 'audio' && remoteUser.audioTrack) {\r\n                    console.log('🔊 TENTATIVE LECTURE AUDIO BIDIRECTIONNELLE pour:', remoteUser.uid);\r\n\r\n                    // Utiliser la nouvelle fonction qui gère l'autoplay\r\n                    await tryPlayAudio(remoteUser.audioTrack, remoteUser.uid);\r\n                }\r\n\r\n                // Préparer la vidéo\r\n                if (mediaType === 'video' && remoteUser.videoTrack) {\r\n                    console.log('🎥 Vidéo distante prête pour:', remoteUser.uid);\r\n                }\r\n\r\n                setRemoteUsers(prevUsers => {\r\n                    const userIndex = prevUsers.findIndex(u => u.uid === remoteUser.uid);\r\n\r\n                    if (userIndex !== -1) {\r\n                        const updatedUsers = [...prevUsers];\r\n                        updatedUsers[userIndex] = {\r\n                            ...updatedUsers[userIndex],\r\n                            [mediaType + 'Track']: remoteUser[mediaType + 'Track'],\r\n                            hasVideo: mediaType === 'video' ? true : updatedUsers[userIndex].hasVideo,\r\n                            hasAudio: mediaType === 'audio' ? true : updatedUsers[userIndex].hasAudio\r\n                        };\r\n                        return updatedUsers;\r\n                    } else {\r\n                        return [...prevUsers, {\r\n                            uid: remoteUser.uid,\r\n                            [mediaType + 'Track']: remoteUser[mediaType + 'Track'],\r\n                            hasVideo: mediaType === 'video',\r\n                            hasAudio: mediaType === 'audio',\r\n                            joinTime: new Date(),\r\n                            name: `Participant ${remoteUser.uid}`\r\n                        }];\r\n                    }\r\n                });\r\n\r\n            } catch (error) {\r\n                console.error('❌ Erreur souscription:', error);\r\n            }\r\n        };\r\n\r\n        const handleUserUnpublished = (remoteUser, mediaType) => {\r\n            console.log('👤 User unpublished:', remoteUser.uid, mediaType);\r\n\r\n            // NOUVEAU: Nettoyer les tracks audio en attente\r\n            if (mediaType === 'audio') {\r\n                pendingAudioTracks.current.delete(remoteUser.uid);\r\n            }\r\n\r\n            setRemoteUsers(prevUsers =>\r\n                prevUsers.map(user =>\r\n                    user.uid === remoteUser.uid\r\n                        ? {\r\n                            ...user,\r\n                            [mediaType + 'Track']: null,\r\n                            hasVideo: mediaType === 'video' ? false : user.hasVideo,\r\n                            hasAudio: mediaType === 'audio' ? false : user.hasAudio\r\n                        }\r\n                        : user\r\n                )\r\n            );\r\n        };\r\n\r\n        const handleUserJoined = (remoteUser) => {\r\n            console.log('👋 User joined:', remoteUser.uid);\r\n            setParticipantCount(prev => prev + 1);\r\n        };\r\n\r\n        const handleUserLeft = (remoteUser, reason) => {\r\n            console.log('👋 User left:', remoteUser.uid, reason);\r\n\r\n            // NOUVEAU: Nettoyer les tracks audio en attente\r\n            pendingAudioTracks.current.delete(remoteUser.uid);\r\n\r\n            setRemoteUsers(prevUsers =>\r\n                prevUsers.filter(user => user.uid !== remoteUser.uid)\r\n            );\r\n            setParticipantCount(prev => Math.max(0, prev - 1));\r\n        };\r\n\r\n        const handleNetworkQuality = (stats) => {\r\n            setNetworkQuality(stats.uplinkNetworkQuality || 0);\r\n        };\r\n\r\n        const handleConnectionStateChange = (currentState, prevState, reason) => {\r\n            console.log('🔗 Connection state:', currentState, 'reason:', reason);\r\n\r\n            if (currentState === 'DISCONNECTED') {\r\n                if (reason && reason.includes('LEAVE')) {\r\n                    console.log('✅ Normal disconnection (user left)');\r\n                    setConnectionError(null);\r\n                } else {\r\n                    setConnectionError('Connexion perdue');\r\n                }\r\n                setIsJoined(false);\r\n            } else if (currentState === 'CONNECTED') {\r\n                setConnectionError(null);\r\n                setIsJoined(true);\r\n            }\r\n        };\r\n\r\n        const handleException = (evt) => {\r\n            console.error('🚨 Agora Exception:', evt);\r\n\r\n            // Ignorer les erreurs de bitrate trop faibles (elles sont normales)\r\n            if (evt.code === 2003 || evt.code === 1003 || evt.code === 2001) {\r\n                console.log('⚠️ Bitrate warning ignoré:', evt.msg);\r\n                return;\r\n            }\r\n\r\n            if (evt.code === 'CAN_NOT_GET_GATEWAY_SERVER') {\r\n                setConnectionError('Erreur de configuration Agora. Vérifiez votre App ID.');\r\n            } else if (evt.code === 'INVALID_VENDOR_KEY') {\r\n                setConnectionError('App ID Agora invalide.');\r\n            } else {\r\n                console.warn('Agora warning:', evt.msg || evt.code);\r\n            }\r\n        };\r\n\r\n        // Enregistrer les événements\r\n        client.on('user-published', handleUserPublished);\r\n        client.on('user-unpublished', handleUserUnpublished);\r\n        client.on('user-joined', handleUserJoined);\r\n        client.on('user-left', handleUserLeft);\r\n        client.on('network-quality', handleNetworkQuality);\r\n        client.on('connection-state-change', handleConnectionStateChange);\r\n        client.on('exception', handleException);\r\n\r\n        console.log('✅ Événements Agora configurés');\r\n\r\n        // Cleanup des événements\r\n        return () => {\r\n            console.log('🧹 Nettoyage événements Agora...');\r\n            if (client) {\r\n                client.removeAllListeners();\r\n            }\r\n            eventsConfiguredRef.current = false;\r\n        };\r\n    }, [clientReady, tryPlayAudio]);\r\n\r\n    // ==========================================\r\n    // REJOINDRE LE CANAL - CORRIGÉ TIMING\r\n    // ==========================================\r\n\r\n    const joinChannel = useCallback(async () => {\r\n        if (isJoiningRef.current || isJoined || !clientRef.current || !channelName || !memoizedUserId) {\r\n            console.log('⚠️ Already joining/joined or missing requirements');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            isJoiningRef.current = true;\r\n            setIsConnecting(true);\r\n            setConnectionError(null);\r\n\r\n            console.log('🔗 Starting join process...');\r\n\r\n            const appId = getAgoraAppId();\r\n            const uid = generateUID(memoizedUserId);\r\n\r\n            console.log('📋 Join parameters:', {\r\n                appId: appId.substring(0, 8) + '...',\r\n                channelName,\r\n                uid,\r\n                userRole: memoizedIsTeacher ? 'teacher' : 'student'\r\n            });\r\n\r\n            console.log('🔄 Attempting to join channel...');\r\n\r\n            const assignedUid = await clientRef.current.join(\r\n                appId,\r\n                channelName,\r\n                null,\r\n                uid\r\n            );\r\n\r\n            console.log('✅ Successfully joined channel with UID:', assignedUid);\r\n            localUidRef.current = assignedUid;\r\n\r\n            // CORRECTION: Mettre à jour l'état AVANT l'activation des médias\r\n            setIsJoined(true);\r\n            setParticipantCount(1);\r\n\r\n            // CORRECTION: Attendre que l'état soit à jour, puis activer les médias\r\n            if (memoizedIsTeacher) {\r\n                console.log('👨‍🏫 Teacher detected, enabling media...');\r\n                try {\r\n                    // Activer avec un délai pour s'assurer que isJoined est à jour\r\n                    setTimeout(async () => {\r\n                        try {\r\n                            await enableCamera();\r\n                            await new Promise(resolve => setTimeout(resolve, 500));\r\n                            await enableAudio();\r\n                            console.log('✅ Médias professeur activés avec succès');\r\n                        } catch (mediaError) {\r\n                            console.warn('⚠️ Failed to auto-enable media:', mediaError);\r\n                        }\r\n                    }, 300);\r\n                } catch (mediaError) {\r\n                    console.warn('⚠️ Failed to auto-enable media:', mediaError);\r\n                }\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to join channel:', error);\r\n\r\n            let errorMessage = 'Impossible de rejoindre la session';\r\n\r\n            if (error.code === 'CAN_NOT_GET_GATEWAY_SERVER') {\r\n                errorMessage = 'Erreur de serveur Agora. Vérifiez votre App ID et votre connexion.';\r\n            } else if (error.code === 'INVALID_VENDOR_KEY') {\r\n                errorMessage = 'App ID Agora invalide. Vérifiez votre configuration.';\r\n            } else if (error.code === 'DYNAMIC_USE_STATIC_KEY') {\r\n                errorMessage = 'Erreur de token. Contactez l\\'administrateur.';\r\n            } else if (error.message) {\r\n                errorMessage = error.message;\r\n            }\r\n\r\n            setConnectionError(errorMessage);\r\n            throw error;\r\n        } finally {\r\n            setIsConnecting(false);\r\n            isJoiningRef.current = false;\r\n        }\r\n    }, [memoizedUserId, memoizedIsTeacher, isJoined, channelName]);\r\n\r\n    // ==========================================\r\n    // GESTION CAMÉRA - CORRIGÉE TIMING PUBLICATION\r\n    // ==========================================\r\n\r\n    const enableCamera = useCallback(async () => {\r\n        try {\r\n            if (localVideoTrack) {\r\n                console.warn('⚠️ Video already enabled');\r\n                return;\r\n            }\r\n\r\n            console.log('📹 Enabling camera...');\r\n\r\n            // PARAMÈTRES VIDÉO OPTIMISÉS\r\n            const videoTrack = await AgoraRTC.createCameraVideoTrack({\r\n                optimizationMode: 'motion',\r\n                encoderConfig: {\r\n                    width: 640,\r\n                    height: 480,\r\n                    frameRate: 15,\r\n                    bitrateMax: 1000,\r\n                    bitrateMin: 300\r\n                }\r\n            });\r\n\r\n            setLocalVideoTrack(videoTrack);\r\n            setIsVideoEnabled(true);\r\n\r\n            // CORRECTION: Publier immédiatement si on est connecté\r\n            if (clientRef.current && localUidRef.current) {\r\n                try {\r\n                    await clientRef.current.publish(videoTrack);\r\n                    console.log('✅ Video track published immediately');\r\n                } catch (publishError) {\r\n                    console.warn('⚠️ Publish video failed, will retry:', publishError);\r\n\r\n                    // Retry après un délai\r\n                    setTimeout(async () => {\r\n                        try {\r\n                            if (clientRef.current && videoTrack) {\r\n                                await clientRef.current.publish(videoTrack);\r\n                                console.log('✅ Video track published on retry');\r\n                            }\r\n                        } catch (retryError) {\r\n                            console.error('❌ Video publish retry failed:', retryError);\r\n                        }\r\n                    }, 1000);\r\n                }\r\n            }\r\n\r\n            console.log('✅ Camera enabled');\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to enable camera:', error);\r\n\r\n            if (error.name === 'NotAllowedError') {\r\n                setConnectionError('Permission caméra refusée. Veuillez autoriser l\\'accès à la caméra.');\r\n            } else if (error.name === 'NotFoundError') {\r\n                setConnectionError('Aucune caméra trouvée sur cet appareil.');\r\n            } else {\r\n                setConnectionError('Impossible d\\'accéder à la caméra');\r\n            }\r\n            throw error;\r\n        }\r\n    }, [localVideoTrack]);\r\n\r\n    const disableCamera = useCallback(async () => {\r\n        try {\r\n            if (!localVideoTrack) return;\r\n\r\n            console.log('📹 Disabling camera...');\r\n\r\n            if (clientRef.current && localUidRef.current) {\r\n                try {\r\n                    await clientRef.current.unpublish(localVideoTrack);\r\n                    console.log('✅ Video track unpublished');\r\n                } catch (unpublishError) {\r\n                    console.warn('⚠️ Video unpublish failed:', unpublishError);\r\n                }\r\n            }\r\n\r\n            localVideoTrack.stop();\r\n            localVideoTrack.close();\r\n\r\n            setLocalVideoTrack(null);\r\n            setIsVideoEnabled(false);\r\n\r\n            console.log('✅ Camera disabled');\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to disable camera:', error);\r\n        }\r\n    }, [localVideoTrack]);\r\n\r\n    // ==========================================\r\n    // GESTION AUDIO - CORRIGÉE TIMING PUBLICATION\r\n    // ==========================================\r\n\r\n    const enableAudio = useCallback(async () => {\r\n        try {\r\n            if (localAudioTrack) {\r\n                console.warn('⚠️ Audio already enabled');\r\n                return;\r\n            }\r\n\r\n            console.log('🎤 Enabling audio...');\r\n\r\n            // PARAMÈTRES AUDIO OPTIMISÉS pour BIDIRECTIONNALITÉ\r\n            const audioTrack = await AgoraRTC.createMicrophoneAudioTrack({\r\n                encoderConfig: {\r\n                    sampleRate: 48000,      // Haute qualité\r\n                    stereo: false,          // Mono plus stable pour la voix\r\n                    bitrate: 128            // Bitrate plus élevé pour meilleure qualité\r\n                },\r\n                ANS: true,                  // Suppression de bruit activée\r\n                AEC: true,                  // Annulation d'écho CRITIQUE\r\n                AGC: true,                  // Contrôle automatique du gain\r\n                bypassWebAudio: false,      // Utiliser WebAudio pour compatibilité\r\n                volume: 100                 // Volume au maximum\r\n            });\r\n\r\n            // IMPORTANT: Régler le volume dès la création\r\n            audioTrack.setVolume(100);\r\n\r\n            setLocalAudioTrack(audioTrack);\r\n            setIsAudioEnabled(true);\r\n            setIsMuted(false);\r\n\r\n            // CORRECTION: Publier immédiatement si on est connecté\r\n            if (clientRef.current && localUidRef.current) {\r\n                try {\r\n                    await clientRef.current.publish(audioTrack);\r\n                    console.log('✅ Audio track published immediately');\r\n                } catch (publishError) {\r\n                    console.warn('⚠️ Publish audio failed, will retry:', publishError);\r\n\r\n                    // Retry après un délai\r\n                    setTimeout(async () => {\r\n                        try {\r\n                            if (clientRef.current && audioTrack) {\r\n                                await clientRef.current.publish(audioTrack);\r\n                                console.log('✅ Audio track published on retry');\r\n                            }\r\n                        } catch (retryError) {\r\n                            console.error('❌ Audio publish retry failed:', retryError);\r\n                        }\r\n                    }, 1000);\r\n                }\r\n            }\r\n\r\n            console.log('✅ Audio enabled with optimized settings');\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to enable audio:', error);\r\n\r\n            if (error.name === 'NotAllowedError') {\r\n                setConnectionError('Permission microphone refusée. Veuillez autoriser l\\'accès au microphone.');\r\n            } else if (error.name === 'NotFoundError') {\r\n                setConnectionError('Aucun microphone trouvé sur cet appareil.');\r\n            } else {\r\n                setConnectionError('Impossible d\\'accéder au microphone');\r\n            }\r\n            throw error;\r\n        }\r\n    }, [localAudioTrack]);\r\n\r\n    const disableAudio = useCallback(async () => {\r\n        try {\r\n            if (!localAudioTrack) return;\r\n\r\n            console.log('🎤 Disabling audio...');\r\n\r\n            if (clientRef.current && localUidRef.current) {\r\n                try {\r\n                    await clientRef.current.unpublish(localAudioTrack);\r\n                    console.log('✅ Audio track unpublished');\r\n                } catch (unpublishError) {\r\n                    console.warn('⚠️ Audio unpublish failed:', unpublishError);\r\n                }\r\n            }\r\n\r\n            localAudioTrack.stop();\r\n            localAudioTrack.close();\r\n\r\n            setLocalAudioTrack(null);\r\n            setIsAudioEnabled(false);\r\n            setIsMuted(false);\r\n\r\n            console.log('✅ Audio disabled');\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to disable audio:', error);\r\n        }\r\n    }, [localAudioTrack]);\r\n\r\n    // ==========================================\r\n    // COUPER/RÉTABLIR LE SON\r\n    // ==========================================\r\n\r\n    const toggleMute = useCallback(async () => {\r\n        if (!localAudioTrack) return;\r\n\r\n        try {\r\n            const newMutedState = !isMuted;\r\n            await localAudioTrack.setEnabled(!newMutedState);\r\n            setIsMuted(newMutedState);\r\n\r\n            console.log(newMutedState ? '🔇 Audio muted' : '🔊 Audio unmuted');\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to toggle mute:', error);\r\n        }\r\n    }, [localAudioTrack, isMuted]);\r\n\r\n    // ==========================================\r\n    // QUITTER LE CANAL\r\n    // ==========================================\r\n\r\n    const leaveChannel = useCallback(async () => {\r\n        try {\r\n            console.log('🚪 Leaving channel...');\r\n\r\n            await disableCamera();\r\n            await disableAudio();\r\n            await stopScreenShare();\r\n\r\n            if (isJoined && clientRef.current) {\r\n                await clientRef.current.leave();\r\n                console.log('✅ Left channel successfully');\r\n            }\r\n\r\n            setIsJoined(false);\r\n            setRemoteUsers([]);\r\n            setParticipantCount(0);\r\n            setConnectionError(null);\r\n            setAudioAutoplayBlocked(false);\r\n            localUidRef.current = null;\r\n            pendingAudioTracks.current.clear();\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to leave channel:', error);\r\n        }\r\n    }, [isJoined]);\r\n\r\n    // ==========================================\r\n    // PARTAGE D'ÉCRAN (inchangé)\r\n    // ==========================================\r\n\r\n    const startScreenShare = useCallback(async () => {\r\n        try {\r\n            if (screenTrack || !memoizedIsTeacher) return;\r\n\r\n            console.log('🖥️ Starting screen share...');\r\n\r\n            const screenVideoTrack = await AgoraRTC.createScreenVideoTrack({\r\n                optimizationMode: 'detail',\r\n                encoderConfig: {\r\n                    width: 1280,\r\n                    height: 720,\r\n                    frameRate: 10,\r\n                    bitrateMax: 2000,\r\n                    bitrateMin: 800\r\n                }\r\n            });\r\n\r\n            if (localVideoTrack && isJoined && clientRef.current) {\r\n                await clientRef.current.unpublish(localVideoTrack);\r\n            }\r\n\r\n            setScreenTrack(screenVideoTrack);\r\n            setIsScreenSharing(true);\r\n\r\n            if (isJoined && clientRef.current) {\r\n                await clientRef.current.publish(screenVideoTrack);\r\n            }\r\n\r\n            screenVideoTrack.on('track-ended', () => {\r\n                console.log('🖥️ Screen share ended by user');\r\n                stopScreenShare();\r\n            });\r\n\r\n            console.log('✅ Screen sharing started');\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to start screen share:', error);\r\n            setConnectionError('Impossible de partager l\\'écran');\r\n            throw error;\r\n        }\r\n    }, [screenTrack, memoizedIsTeacher, localVideoTrack, isJoined]);\r\n\r\n    const stopScreenShare = useCallback(async () => {\r\n        try {\r\n            if (!screenTrack) return;\r\n\r\n            console.log('🖥️ Stopping screen share...');\r\n\r\n            if (isJoined && clientRef.current) {\r\n                await clientRef.current.unpublish(screenTrack);\r\n            }\r\n\r\n            screenTrack.stop();\r\n            screenTrack.close();\r\n\r\n            setScreenTrack(null);\r\n            setIsScreenSharing(false);\r\n\r\n            if (localVideoTrack && isJoined && clientRef.current) {\r\n                await clientRef.current.publish(localVideoTrack);\r\n            }\r\n\r\n            console.log('✅ Screen sharing stopped');\r\n\r\n        } catch (error) {\r\n            console.error('❌ Failed to stop screen share:', error);\r\n        }\r\n    }, [screenTrack, isJoined, localVideoTrack]);\r\n\r\n    return {\r\n        // États de connexion\r\n        isJoined,\r\n        isConnecting,\r\n        connectionError,\r\n        networkQuality,\r\n        participantCount,\r\n\r\n        // États des médias\r\n        isVideoEnabled,\r\n        isAudioEnabled,\r\n        isScreenSharing,\r\n        isMuted,\r\n\r\n        // NOUVEAU: État autoplay\r\n        audioAutoplayBlocked,\r\n\r\n        // Tracks\r\n        localVideoTrack,\r\n        localAudioTrack,\r\n        screenTrack,\r\n        remoteUsers,\r\n\r\n        // Actions\r\n        joinChannel,\r\n        leaveChannel,\r\n        enableCamera,\r\n        disableCamera,\r\n        enableAudio,\r\n        disableAudio,\r\n        toggleMute,\r\n        startScreenShare,\r\n        stopScreenShare,\r\n\r\n        // NOUVEAU: Fonction pour débloquer l'audio\r\n        enableAudioPlayback,\r\n\r\n        // Utilitaires\r\n        localUid: localUidRef.current,\r\n        channelName\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}