{"ast":null,"code":"/**\r\n * @file axiosInstance.js\r\n * @description Fichier de configuration pour une instance Axios centralisée.\r\n * Ce module crée une instance d'Axios avec une URL de base préconfigurée\r\n * et un intercepteur de requête pour ajouter automatiquement le token d'authentification JWT.\r\n * Cela simplifie les appels API à travers l'application.\r\n */\n\n// =================================================================================\n// IMPORTATIONS\n// =================================================================================\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\nimport { handleSessionExpiration } from './errorHandler';\n\n// =================================================================================\n// CONFIGURATION DE L'INSTANCE AXIOS\n// =================================================================================\n\n// Crée une instance d'Axios avec des paramètres par défaut.\nconst axiosInstance = axios.create({\n  // L'URL de base de l'API backend. Toutes les requêtes relatives utiliseront cette URL.\n  baseURL: API_BASE_URL,\n  // Ajoute un timeout pour éviter les requêtes qui durent trop longtemps\n  timeout: 10000\n});\n\n// =================================================================================\n// INTERCEPTEUR DE REQUÊTE\n// =================================================================================\n\n/**\r\n * Intercepteur de requête Axios.\r\n * Ce middleware s'exécute avant chaque requête envoyée depuis l'application.\r\n * Son rôle est de récupérer le token JWT depuis le localStorage et de l'injecter\r\n * dans l'en-tête 'Authorization' de la requête si le token existe.\r\n */\naxiosInstance.interceptors.request.use(config => {\n  // Récupère le token stocké dans le localStorage.\n  const token = localStorage.getItem('token');\n\n  // Si un token est trouvé, l'ajoute à l'en-tête d'autorisation.\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  // Retourne l'objet de configuration de la requête modifié (ou non).\n  return config;\n}, error => {\n  // Gère les erreurs qui pourraient survenir lors de la configuration de la requête.\n  console.error('Error in request interceptor:', error);\n  return Promise.reject(error);\n});\n\n// =================================================================================\n// INTERCEPTEUR DE RÉPONSE\n// =================================================================================\n\n/**\r\n * Intercepteur de réponse Axios.\r\n * Ce middleware s'exécute après chaque réponse reçue du serveur.\r\n * Il permet de gérer globalement les erreurs comme l'expiration de token.\r\n */\naxiosInstance.interceptors.response.use(\n// Pour les réponses réussies, on retourne simplement la réponse\nresponse => response,\n// Pour les erreurs, on vérifie si c'est une erreur d'authentification\nerror => {\n  // Gérer l'expiration de session (401)\n  if (handleSessionExpiration(error)) {\n    // Déjà géré par la fonction\n    return new Promise(() => {});\n  }\n\n  // Pour toutes les autres erreurs, on les propage\n  return Promise.reject(error);\n});\n\n// =================================================================================\n// EXPORTATION\n// =================================================================================\nexport default axiosInstance;","map":{"version":3,"names":["axios","API_BASE_URL","handleSessionExpiration","axiosInstance","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","error","console","Promise","reject","response"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/utils/axiosInstance.js"],"sourcesContent":["/**\r\n * @file axiosInstance.js\r\n * @description Fichier de configuration pour une instance Axios centralisée.\r\n * Ce module crée une instance d'Axios avec une URL de base préconfigurée\r\n * et un intercepteur de requête pour ajouter automatiquement le token d'authentification JWT.\r\n * Cela simplifie les appels API à travers l'application.\r\n */\r\n\r\n// =================================================================================\r\n// IMPORTATIONS\r\n// =================================================================================\r\nimport axios from 'axios';\r\nimport { API_BASE_URL } from '../config';\r\nimport { handleSessionExpiration } from './errorHandler';\r\n\r\n// =================================================================================\r\n// CONFIGURATION DE L'INSTANCE AXIOS\r\n// =================================================================================\r\n\r\n// Crée une instance d'Axios avec des paramètres par défaut.\r\nconst axiosInstance = axios.create({\r\n    // L'URL de base de l'API backend. Toutes les requêtes relatives utiliseront cette URL.\r\n    baseURL: API_BASE_URL,\r\n    // Ajoute un timeout pour éviter les requêtes qui durent trop longtemps\r\n    timeout: 10000,\r\n});\r\n\r\n// =================================================================================\r\n// INTERCEPTEUR DE REQUÊTE\r\n// =================================================================================\r\n\r\n/**\r\n * Intercepteur de requête Axios.\r\n * Ce middleware s'exécute avant chaque requête envoyée depuis l'application.\r\n * Son rôle est de récupérer le token JWT depuis le localStorage et de l'injecter\r\n * dans l'en-tête 'Authorization' de la requête si le token existe.\r\n */\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n        // Récupère le token stocké dans le localStorage.\r\n        const token = localStorage.getItem('token');\r\n\r\n        // Si un token est trouvé, l'ajoute à l'en-tête d'autorisation.\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n\r\n        // Retourne l'objet de configuration de la requête modifié (ou non).\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // Gère les erreurs qui pourraient survenir lors de la configuration de la requête.\r\n        console.error('Error in request interceptor:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// =================================================================================\r\n// INTERCEPTEUR DE RÉPONSE\r\n// =================================================================================\r\n\r\n/**\r\n * Intercepteur de réponse Axios.\r\n * Ce middleware s'exécute après chaque réponse reçue du serveur.\r\n * Il permet de gérer globalement les erreurs comme l'expiration de token.\r\n */\r\naxiosInstance.interceptors.response.use(\r\n    // Pour les réponses réussies, on retourne simplement la réponse\r\n    (response) => response,\r\n    \r\n    // Pour les erreurs, on vérifie si c'est une erreur d'authentification\r\n    (error) => {\r\n        // Gérer l'expiration de session (401)\r\n        if (handleSessionExpiration(error)) {\r\n            // Déjà géré par la fonction\r\n            return new Promise(() => {});\r\n        }\r\n        \r\n        // Pour toutes les autres erreurs, on les propage\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// =================================================================================\r\n// EXPORTATION\r\n// =================================================================================\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,WAAW;AACxC,SAASC,uBAAuB,QAAQ,gBAAgB;;AAExD;AACA;AACA;;AAEA;AACA,MAAMC,aAAa,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC/B;EACAC,OAAO,EAAEJ,YAAY;EACrB;EACAK,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAH,aAAa,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACjCC,MAAM,IAAK;EACR;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACvD;;EAEA;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP;EACAC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;EACrD,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAZ,aAAa,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG;AACnC;AACCU,QAAQ,IAAKA,QAAQ;AAEtB;AACCJ,KAAK,IAAK;EACP;EACA,IAAIb,uBAAuB,CAACa,KAAK,CAAC,EAAE;IAChC;IACA,OAAO,IAAIE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;EAChC;;EAEA;EACA,OAAOA,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA;AACA;AACA,eAAeZ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}