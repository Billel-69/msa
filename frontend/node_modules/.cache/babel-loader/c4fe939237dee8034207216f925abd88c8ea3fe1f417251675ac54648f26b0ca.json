{"ast":null,"code":"var _s = $RefreshSig$();\n// Fichier: src/hooks/useSocket.js\n// Version corrig√©e pour √©viter les reconnexions multiples\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { io } from 'socket.io-client';\nimport { useAuth } from '../context/AuthContext';\nexport const useSocket = () => {\n  _s();\n  const {\n    token,\n    user\n  } = useAuth();\n\n  // √âtats\n  const [isConnected, setIsConnected] = useState(false);\n\n  // Refs pour √©viter les reconnexions\n  const socketRef = useRef(null);\n  const isConnectingRef = useRef(false);\n  const listenersRef = useRef(new Map());\n\n  // Configuration\n  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\n\n  // Connexion unique\n  useEffect(() => {\n    if (!token || !user || socketRef.current || isConnectingRef.current) {\n      return;\n    }\n    connectSocket();\n    return () => {\n      disconnectSocket();\n    };\n  }, [token, user === null || user === void 0 ? void 0 : user.id]); // D√©pendances stables\n\n  const connectSocket = useCallback(() => {\n    if (isConnectingRef.current || socketRef.current) {\n      return;\n    }\n    try {\n      isConnectingRef.current = true;\n      console.log('üîå Tentative de connexion Socket.io...');\n      console.log('URL:', API_URL);\n      console.log('Token pr√©sent:', !!token);\n      const socket = io(API_URL, {\n        auth: {\n          token\n        },\n        transports: ['websocket', 'polling'],\n        timeout: 10000,\n        retries: 3\n      });\n      socket.on('connect', () => {\n        console.log('‚úÖ Socket connect√©:', socket.id);\n        setIsConnected(true);\n        isConnectingRef.current = false;\n      });\n      socket.on('disconnect', reason => {\n        console.log('‚ùå Socket d√©connect√©:', reason);\n        setIsConnected(false);\n\n        // Ne pas reconnecter automatiquement sur certaines raisons\n        if (reason === 'io client disconnect' || reason === 'transport close') {\n          socketRef.current = null;\n        }\n      });\n      socket.on('connect_error', error => {\n        console.error('‚ùå Erreur de connexion Socket:', error);\n        setIsConnected(false);\n        isConnectingRef.current = false;\n      });\n      socket.on('error', error => {\n        console.error('‚ùå Erreur Socket g√©n√©rale:', error);\n\n        // Notifier les listeners d'erreur\n        const errorListeners = listenersRef.current.get('error') || [];\n        errorListeners.forEach(callback => {\n          try {\n            callback(error);\n          } catch (err) {\n            console.error('Erreur dans callback d\\'erreur:', err);\n          }\n        });\n      });\n      socketRef.current = socket;\n    } catch (error) {\n      console.error('‚ùå Erreur cr√©ation socket:', error);\n      isConnectingRef.current = false;\n    }\n  }, [API_URL, token]);\n  const disconnectSocket = useCallback(() => {\n    console.log('üîå D√©connexion Socket...');\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n    setIsConnected(false);\n    isConnectingRef.current = false;\n    listenersRef.current.clear();\n  }, []);\n\n  // Rejoindre une session\n  const joinSession = useCallback(sessionId => {\n    if (!socketRef.current || !isConnected) {\n      console.warn('‚ö†Ô∏è Socket non connect√© pour joinSession');\n      return;\n    }\n    console.log('üìù Rejoindre session Socket:', sessionId);\n    socketRef.current.emit('join-live-session', {\n      sessionId\n    });\n  }, [isConnected]);\n\n  // Quitter une session\n  const leaveSession = useCallback(sessionId => {\n    if (!socketRef.current) {\n      return;\n    }\n    console.log('üëã Quitter session Socket:', sessionId);\n    socketRef.current.emit('leave-live-session', {\n      sessionId\n    });\n  }, []);\n\n  // Envoyer un message\n  const sendMessage = useCallback((sessionId, message) => {\n    if (!socketRef.current || !isConnected) {\n      console.warn('‚ö†Ô∏è Socket non connect√© pour sendMessage');\n      return;\n    }\n    if (!message || !message.trim()) {\n      console.warn('‚ö†Ô∏è Message vide');\n      return;\n    }\n    console.log('üí¨ Envoi message Socket');\n    socketRef.current.emit('send-live-message', {\n      sessionId,\n      message: message.trim()\n    });\n  }, [isConnected]);\n\n  // √âcouter les nouveaux messages\n  const onNewMessage = useCallback(callback => {\n    if (!socketRef.current) {\n      return () => {};\n    }\n    const handleNewMessage = data => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error('Erreur dans callback onNewMessage:', error);\n      }\n    };\n\n    // Ajouter le listener\n    socketRef.current.on('new-live-message', handleNewMessage);\n\n    // Stocker pour nettoyage\n    const listeners = listenersRef.current.get('newMessage') || [];\n    listeners.push(callback);\n    listenersRef.current.set('newMessage', listeners);\n\n    // Retourner fonction de nettoyage\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.off('new-live-message', handleNewMessage);\n      }\n      const currentListeners = listenersRef.current.get('newMessage') || [];\n      const filteredListeners = currentListeners.filter(cb => cb !== callback);\n      listenersRef.current.set('newMessage', filteredListeners);\n    };\n  }, []);\n\n  // √âcouter les √©v√©nements de session\n  const onJoinedSession = useCallback(callback => {\n    if (!socketRef.current) {\n      return () => {};\n    }\n    const handleJoinedSession = data => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error('Erreur dans callback onJoinedSession:', error);\n      }\n    };\n    socketRef.current.on('joined-live-session', handleJoinedSession);\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.off('joined-live-session', handleJoinedSession);\n      }\n    };\n  }, []);\n\n  // √âcouter les erreurs\n  const onError = useCallback(callback => {\n    const listeners = listenersRef.current.get('error') || [];\n    listeners.push(callback);\n    listenersRef.current.set('error', listeners);\n    return () => {\n      const currentListeners = listenersRef.current.get('error') || [];\n      const filteredListeners = currentListeners.filter(cb => cb !== callback);\n      listenersRef.current.set('error', filteredListeners);\n    };\n  }, []);\n  return {\n    isConnected,\n    joinSession,\n    leaveSession,\n    sendMessage,\n    onNewMessage,\n    onJoinedSession,\n    onError,\n    reconnect: connectSocket,\n    disconnect: disconnectSocket\n  };\n};\n_s(useSocket, \"GTqgFuCIz8/hWAgV1ivdC/hRItA=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useCallback","io","useAuth","useSocket","_s","token","user","isConnected","setIsConnected","socketRef","isConnectingRef","listenersRef","Map","API_URL","process","env","REACT_APP_API_URL","current","connectSocket","disconnectSocket","id","console","log","socket","auth","transports","timeout","retries","on","reason","error","errorListeners","get","forEach","callback","err","disconnect","clear","joinSession","sessionId","warn","emit","leaveSession","sendMessage","message","trim","onNewMessage","handleNewMessage","data","listeners","push","set","off","currentListeners","filteredListeners","filter","cb","onJoinedSession","handleJoinedSession","onError","reconnect"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/hooks/useSocket.js"],"sourcesContent":["// Fichier: src/hooks/useSocket.js\r\n// Version corrig√©e pour √©viter les reconnexions multiples\r\n\r\nimport { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nexport const useSocket = () => {\r\n    const { token, user } = useAuth();\r\n\r\n    // √âtats\r\n    const [isConnected, setIsConnected] = useState(false);\r\n\r\n    // Refs pour √©viter les reconnexions\r\n    const socketRef = useRef(null);\r\n    const isConnectingRef = useRef(false);\r\n    const listenersRef = useRef(new Map());\r\n\r\n    // Configuration\r\n    const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n\r\n    // Connexion unique\r\n    useEffect(() => {\r\n        if (!token || !user || socketRef.current || isConnectingRef.current) {\r\n            return;\r\n        }\r\n\r\n        connectSocket();\r\n\r\n        return () => {\r\n            disconnectSocket();\r\n        };\r\n    }, [token, user?.id]); // D√©pendances stables\r\n\r\n    const connectSocket = useCallback(() => {\r\n        if (isConnectingRef.current || socketRef.current) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            isConnectingRef.current = true;\r\n\r\n            console.log('üîå Tentative de connexion Socket.io...');\r\n            console.log('URL:', API_URL);\r\n            console.log('Token pr√©sent:', !!token);\r\n\r\n            const socket = io(API_URL, {\r\n                auth: { token },\r\n                transports: ['websocket', 'polling'],\r\n                timeout: 10000,\r\n                retries: 3\r\n            });\r\n\r\n            socket.on('connect', () => {\r\n                console.log('‚úÖ Socket connect√©:', socket.id);\r\n                setIsConnected(true);\r\n                isConnectingRef.current = false;\r\n            });\r\n\r\n            socket.on('disconnect', (reason) => {\r\n                console.log('‚ùå Socket d√©connect√©:', reason);\r\n                setIsConnected(false);\r\n\r\n                // Ne pas reconnecter automatiquement sur certaines raisons\r\n                if (reason === 'io client disconnect' || reason === 'transport close') {\r\n                    socketRef.current = null;\r\n                }\r\n            });\r\n\r\n            socket.on('connect_error', (error) => {\r\n                console.error('‚ùå Erreur de connexion Socket:', error);\r\n                setIsConnected(false);\r\n                isConnectingRef.current = false;\r\n            });\r\n\r\n            socket.on('error', (error) => {\r\n                console.error('‚ùå Erreur Socket g√©n√©rale:', error);\r\n\r\n                // Notifier les listeners d'erreur\r\n                const errorListeners = listenersRef.current.get('error') || [];\r\n                errorListeners.forEach(callback => {\r\n                    try {\r\n                        callback(error);\r\n                    } catch (err) {\r\n                        console.error('Erreur dans callback d\\'erreur:', err);\r\n                    }\r\n                });\r\n            });\r\n\r\n            socketRef.current = socket;\r\n\r\n        } catch (error) {\r\n            console.error('‚ùå Erreur cr√©ation socket:', error);\r\n            isConnectingRef.current = false;\r\n        }\r\n    }, [API_URL, token]);\r\n\r\n    const disconnectSocket = useCallback(() => {\r\n        console.log('üîå D√©connexion Socket...');\r\n\r\n        if (socketRef.current) {\r\n            socketRef.current.disconnect();\r\n            socketRef.current = null;\r\n        }\r\n\r\n        setIsConnected(false);\r\n        isConnectingRef.current = false;\r\n        listenersRef.current.clear();\r\n    }, []);\r\n\r\n    // Rejoindre une session\r\n    const joinSession = useCallback((sessionId) => {\r\n        if (!socketRef.current || !isConnected) {\r\n            console.warn('‚ö†Ô∏è Socket non connect√© pour joinSession');\r\n            return;\r\n        }\r\n\r\n        console.log('üìù Rejoindre session Socket:', sessionId);\r\n        socketRef.current.emit('join-live-session', { sessionId });\r\n    }, [isConnected]);\r\n\r\n    // Quitter une session\r\n    const leaveSession = useCallback((sessionId) => {\r\n        if (!socketRef.current) {\r\n            return;\r\n        }\r\n\r\n        console.log('üëã Quitter session Socket:', sessionId);\r\n        socketRef.current.emit('leave-live-session', { sessionId });\r\n    }, []);\r\n\r\n    // Envoyer un message\r\n    const sendMessage = useCallback((sessionId, message) => {\r\n        if (!socketRef.current || !isConnected) {\r\n            console.warn('‚ö†Ô∏è Socket non connect√© pour sendMessage');\r\n            return;\r\n        }\r\n\r\n        if (!message || !message.trim()) {\r\n            console.warn('‚ö†Ô∏è Message vide');\r\n            return;\r\n        }\r\n\r\n        console.log('üí¨ Envoi message Socket');\r\n        socketRef.current.emit('send-live-message', {\r\n            sessionId,\r\n            message: message.trim()\r\n        });\r\n    }, [isConnected]);\r\n\r\n    // √âcouter les nouveaux messages\r\n    const onNewMessage = useCallback((callback) => {\r\n        if (!socketRef.current) {\r\n            return () => {};\r\n        }\r\n\r\n        const handleNewMessage = (data) => {\r\n            try {\r\n                callback(data);\r\n            } catch (error) {\r\n                console.error('Erreur dans callback onNewMessage:', error);\r\n            }\r\n        };\r\n\r\n        // Ajouter le listener\r\n        socketRef.current.on('new-live-message', handleNewMessage);\r\n\r\n        // Stocker pour nettoyage\r\n        const listeners = listenersRef.current.get('newMessage') || [];\r\n        listeners.push(callback);\r\n        listenersRef.current.set('newMessage', listeners);\r\n\r\n        // Retourner fonction de nettoyage\r\n        return () => {\r\n            if (socketRef.current) {\r\n                socketRef.current.off('new-live-message', handleNewMessage);\r\n            }\r\n\r\n            const currentListeners = listenersRef.current.get('newMessage') || [];\r\n            const filteredListeners = currentListeners.filter(cb => cb !== callback);\r\n            listenersRef.current.set('newMessage', filteredListeners);\r\n        };\r\n    }, []);\r\n\r\n    // √âcouter les √©v√©nements de session\r\n    const onJoinedSession = useCallback((callback) => {\r\n        if (!socketRef.current) {\r\n            return () => {};\r\n        }\r\n\r\n        const handleJoinedSession = (data) => {\r\n            try {\r\n                callback(data);\r\n            } catch (error) {\r\n                console.error('Erreur dans callback onJoinedSession:', error);\r\n            }\r\n        };\r\n\r\n        socketRef.current.on('joined-live-session', handleJoinedSession);\r\n\r\n        return () => {\r\n            if (socketRef.current) {\r\n                socketRef.current.off('joined-live-session', handleJoinedSession);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    // √âcouter les erreurs\r\n    const onError = useCallback((callback) => {\r\n        const listeners = listenersRef.current.get('error') || [];\r\n        listeners.push(callback);\r\n        listenersRef.current.set('error', listeners);\r\n\r\n        return () => {\r\n            const currentListeners = listenersRef.current.get('error') || [];\r\n            const filteredListeners = currentListeners.filter(cb => cb !== callback);\r\n            listenersRef.current.set('error', filteredListeners);\r\n        };\r\n    }, []);\r\n\r\n    return {\r\n        isConnected,\r\n        joinSession,\r\n        leaveSession,\r\n        sendMessage,\r\n        onNewMessage,\r\n        onJoinedSession,\r\n        onError,\r\n        reconnect: connectSocket,\r\n        disconnect: disconnectSocket\r\n    };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}