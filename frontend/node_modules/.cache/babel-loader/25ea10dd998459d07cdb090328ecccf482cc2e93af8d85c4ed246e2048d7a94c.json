{"ast":null,"code":"// Fichier: src/config/agora.js\n// Configuration Agora avec votre NOUVEL App ID\n\nexport const agoraConfig = {\n  // Votre NOUVEAU App ID Agora (sans certificat)\n  appId: \"0b17dfbaa0e444ae8616069fbd5a7080\",\n  tempToken: null,\n  // Pas de token n√©cessaire\n\n  // Configuration des m√©dias\n  videoConfig: {\n    teacher: {\n      width: {\n        ideal: 1280,\n        max: 1920\n      },\n      height: {\n        ideal: 720,\n        max: 1080\n      },\n      frameRate: {\n        ideal: 30,\n        max: 30\n      },\n      facingMode: 'user'\n    },\n    student: {\n      width: {\n        ideal: 640,\n        max: 1280\n      },\n      height: {\n        ideal: 480,\n        max: 720\n      },\n      frameRate: {\n        ideal: 15,\n        max: 30\n      }\n    },\n    screenShare: {\n      width: {\n        ideal: 1920\n      },\n      height: {\n        ideal: 1080\n      },\n      frameRate: {\n        ideal: 15,\n        max: 30\n      }\n    }\n  },\n  audioConfig: {\n    teacher: {\n      echoCancellation: true,\n      noiseSuppression: true,\n      autoGainControl: true,\n      sampleRate: 48000\n    },\n    student: {\n      echoCancellation: true,\n      noiseSuppression: true,\n      autoGainControl: true,\n      sampleRate: 44100\n    }\n  }\n};\n\n// Fonction pour obtenir l'App ID avec validation\nexport const getAgoraAppId = () => {\n  // D'abord essayer les variables d'environnement\n  const envAppId = process.env.REACT_APP_AGORA_APP_ID_DEV || process.env.REACT_APP_AGORA_APP_ID || process.env.REACT_APP_AGORA_APP_ID_PROD;\n\n  // Ensuite utiliser la configuration par d√©faut\n  const appId = envAppId || agoraConfig.appId;\n  console.log('üîë Using Agora App ID:', appId ? `${appId.substring(0, 8)}...` : 'MISSING');\n\n  // Validation de l'App ID\n  if (!appId || appId === 'YOUR_AGORA_APP_ID' || appId.length !== 32) {\n    console.error('‚ùå Invalid Agora App ID:', appId);\n    throw new Error(`App ID Agora invalide. App ID: ${appId}`);\n  }\n  return appId;\n};\n\n// Fonction pour g√©n√©rer un nom de canal valide\nexport const generateChannelName = sessionId => {\n  // Les noms de canaux Agora doivent √™tre alphanum√©riques\n  const cleanSessionId = sessionId.toString().replace(/[^a-zA-Z0-9]/g, '');\n  return `msa${cleanSessionId}`;\n};\n\n// Fonction pour g√©n√©rer un UID valide\nexport const generateUID = userId => {\n  // Agora UID doit √™tre un entier entre 1 et (2^32-1)\n  if (!userId) {\n    return Math.floor(Math.random() * 1000000) + 1;\n  }\n\n  // Cr√©er un UID bas√© sur l'ID utilisateur\n  const userIdNum = parseInt(userId.toString().replace(/[^0-9]/g, '')) || 1;\n  const timestamp = Date.now() % 100000; // Prendre les 5 derniers chiffres\n  const uid = (userIdNum * 1000 + timestamp) % 2147483647; // Max 32-bit integer\n\n  console.log('üÜî Generated UID:', uid, 'for user:', userId);\n  return uid;\n};\n\n// Fonction de test de connectivit√©\nexport const testAgoraConnection = async AgoraRTC => {\n  try {\n    console.log('üß™ Testing Agora connection with new App ID...');\n    const appId = getAgoraAppId();\n\n    // Test simple de cr√©ation de client\n    const testClient = AgoraRTC.createClient({\n      mode: 'rtc',\n      codec: 'vp8'\n    });\n\n    // Tester la connexion avec un canal temporaire\n    const testChannel = `test_${Date.now()}`;\n    const testUid = Math.floor(Math.random() * 10000);\n    console.log('üîó Testing join with NEW App ID:', {\n      appId: appId.substring(0, 8) + '...',\n      testChannel,\n      testUid\n    });\n    await testClient.join(appId, testChannel, null, testUid);\n    console.log('‚úÖ Agora connection test successful with new App ID!');\n    await testClient.leave();\n    console.log('‚úÖ Agora disconnection test successful');\n    return {\n      success: true,\n      appId\n    };\n  } catch (error) {\n    console.error('‚ùå Agora connection test failed:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n};","map":{"version":3,"names":["agoraConfig","appId","tempToken","videoConfig","teacher","width","ideal","max","height","frameRate","facingMode","student","screenShare","audioConfig","echoCancellation","noiseSuppression","autoGainControl","sampleRate","getAgoraAppId","envAppId","process","env","REACT_APP_AGORA_APP_ID_DEV","REACT_APP_AGORA_APP_ID","REACT_APP_AGORA_APP_ID_PROD","console","log","substring","length","error","Error","generateChannelName","sessionId","cleanSessionId","toString","replace","generateUID","userId","Math","floor","random","userIdNum","parseInt","timestamp","Date","now","uid","testAgoraConnection","AgoraRTC","testClient","createClient","mode","codec","testChannel","testUid","join","leave","success"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/config/agora.js"],"sourcesContent":["// Fichier: src/config/agora.js\r\n// Configuration Agora avec votre NOUVEL App ID\r\n\r\nexport const agoraConfig = {\r\n    // Votre NOUVEAU App ID Agora (sans certificat)\r\n    appId: \"0b17dfbaa0e444ae8616069fbd5a7080\",\r\n    tempToken: null, // Pas de token n√©cessaire\r\n\r\n    // Configuration des m√©dias\r\n    videoConfig: {\r\n        teacher: {\r\n            width: { ideal: 1280, max: 1920 },\r\n            height: { ideal: 720, max: 1080 },\r\n            frameRate: { ideal: 30, max: 30 },\r\n            facingMode: 'user'\r\n        },\r\n        student: {\r\n            width: { ideal: 640, max: 1280 },\r\n            height: { ideal: 480, max: 720 },\r\n            frameRate: { ideal: 15, max: 30 }\r\n        },\r\n        screenShare: {\r\n            width: { ideal: 1920 },\r\n            height: { ideal: 1080 },\r\n            frameRate: { ideal: 15, max: 30 }\r\n        }\r\n    },\r\n\r\n    audioConfig: {\r\n        teacher: {\r\n            echoCancellation: true,\r\n            noiseSuppression: true,\r\n            autoGainControl: true,\r\n            sampleRate: 48000\r\n        },\r\n        student: {\r\n            echoCancellation: true,\r\n            noiseSuppression: true,\r\n            autoGainControl: true,\r\n            sampleRate: 44100\r\n        }\r\n    }\r\n};\r\n\r\n// Fonction pour obtenir l'App ID avec validation\r\nexport const getAgoraAppId = () => {\r\n    // D'abord essayer les variables d'environnement\r\n    const envAppId = process.env.REACT_APP_AGORA_APP_ID_DEV ||\r\n        process.env.REACT_APP_AGORA_APP_ID ||\r\n        process.env.REACT_APP_AGORA_APP_ID_PROD;\r\n\r\n    // Ensuite utiliser la configuration par d√©faut\r\n    const appId = envAppId || agoraConfig.appId;\r\n\r\n    console.log('üîë Using Agora App ID:', appId ? `${appId.substring(0, 8)}...` : 'MISSING');\r\n\r\n    // Validation de l'App ID\r\n    if (!appId || appId === 'YOUR_AGORA_APP_ID' || appId.length !== 32) {\r\n        console.error('‚ùå Invalid Agora App ID:', appId);\r\n        throw new Error(`App ID Agora invalide. App ID: ${appId}`);\r\n    }\r\n\r\n    return appId;\r\n};\r\n\r\n// Fonction pour g√©n√©rer un nom de canal valide\r\nexport const generateChannelName = (sessionId) => {\r\n    // Les noms de canaux Agora doivent √™tre alphanum√©riques\r\n    const cleanSessionId = sessionId.toString().replace(/[^a-zA-Z0-9]/g, '');\r\n    return `msa${cleanSessionId}`;\r\n};\r\n\r\n// Fonction pour g√©n√©rer un UID valide\r\nexport const generateUID = (userId) => {\r\n    // Agora UID doit √™tre un entier entre 1 et (2^32-1)\r\n    if (!userId) {\r\n        return Math.floor(Math.random() * 1000000) + 1;\r\n    }\r\n\r\n    // Cr√©er un UID bas√© sur l'ID utilisateur\r\n    const userIdNum = parseInt(userId.toString().replace(/[^0-9]/g, '')) || 1;\r\n    const timestamp = Date.now() % 100000; // Prendre les 5 derniers chiffres\r\n    const uid = (userIdNum * 1000 + timestamp) % 2147483647; // Max 32-bit integer\r\n\r\n    console.log('üÜî Generated UID:', uid, 'for user:', userId);\r\n    return uid;\r\n};\r\n\r\n// Fonction de test de connectivit√©\r\nexport const testAgoraConnection = async (AgoraRTC) => {\r\n    try {\r\n        console.log('üß™ Testing Agora connection with new App ID...');\r\n\r\n        const appId = getAgoraAppId();\r\n\r\n        // Test simple de cr√©ation de client\r\n        const testClient = AgoraRTC.createClient({ mode: 'rtc', codec: 'vp8' });\r\n\r\n        // Tester la connexion avec un canal temporaire\r\n        const testChannel = `test_${Date.now()}`;\r\n        const testUid = Math.floor(Math.random() * 10000);\r\n\r\n        console.log('üîó Testing join with NEW App ID:', {\r\n            appId: appId.substring(0, 8) + '...',\r\n            testChannel,\r\n            testUid\r\n        });\r\n\r\n        await testClient.join(appId, testChannel, null, testUid);\r\n        console.log('‚úÖ Agora connection test successful with new App ID!');\r\n\r\n        await testClient.leave();\r\n        console.log('‚úÖ Agora disconnection test successful');\r\n\r\n        return { success: true, appId };\r\n    } catch (error) {\r\n        console.error('‚ùå Agora connection test failed:', error);\r\n        return { success: false, error };\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}