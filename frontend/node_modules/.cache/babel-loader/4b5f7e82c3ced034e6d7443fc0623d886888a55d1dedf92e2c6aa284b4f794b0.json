{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\OneDrive\\\\Documents\\\\GitHub\\\\msa\\\\frontend\\\\src\\\\components\\\\NotificationToast.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext';\nimport '../styles/NotificationToast.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationToast = () => {\n  _s();\n  const {\n    user,\n    token\n  } = useAuth();\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    if (token) {\n      // Listen for gamification events\n      const eventSource = new EventSource(`http://localhost:5000/api/gamification/events/stream?token=${token}`);\n      eventSource.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('Received gamification event:', data);\n\n          // Create notification based on event type\n          let notification = null;\n          switch (data.type) {\n            case 'xp_gained':\n              notification = {\n                id: Date.now(),\n                type: 'success',\n                title: 'XP Gagné!',\n                message: `+${data.amount} XP`,\n                duration: 3000\n              };\n              break;\n            case 'badge_earned':\n              notification = {\n                id: Date.now(),\n                type: 'achievement',\n                title: 'Nouveau Badge!',\n                message: data.badge.name,\n                duration: 5000\n              };\n              break;\n            case 'achievement_unlocked':\n              notification = {\n                id: Date.now(),\n                type: 'achievement',\n                title: 'Succès Débloqué!',\n                message: data.achievement.name,\n                duration: 5000\n              };\n              break;\n            case 'level_up':\n              notification = {\n                id: Date.now(),\n                type: 'levelup',\n                title: 'Niveau Supérieur!',\n                message: `Niveau ${data.newLevel}`,\n                duration: 4000\n              };\n              break;\n            default:\n              break;\n          }\n          if (notification) {\n            setNotifications(prev => [...prev, notification]);\n\n            // Auto-remove notification\n            setTimeout(() => {\n              setNotifications(prev => prev.filter(n => n.id !== notification.id));\n            }, notification.duration);\n          }\n        } catch (error) {\n          console.error('Error parsing gamification event:', error);\n        }\n      };\n      eventSource.onerror = error => {\n        console.error('EventSource error:', error);\n        eventSource.close();\n      };\n      return () => {\n        eventSource.close();\n      };\n    }\n  }, [token]);\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n  if (!user || notifications.length === 0) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notification-container\",\n    children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `notification notification-${notification.type}`,\n      onClick: () => removeNotification(notification.id),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notification-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"notification-icon\",\n          children: [notification.type === 'success' && '🎉', notification.type === 'achievement' && '🏆', notification.type === 'levelup' && '⭐']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"notification-title\",\n          children: notification.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"notification-close\",\n          onClick: e => {\n            e.stopPropagation();\n            removeNotification(notification.id);\n          },\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"notification-message\",\n        children: notification.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }, this)]\n    }, notification.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(NotificationToast, \"GP0VeAdUW1VYLTL0IIbHvv3MPKE=\", false, function () {\n  return [useAuth];\n});\n_c = NotificationToast;\nexport default NotificationToast;\nvar _c;\n$RefreshReg$(_c, \"NotificationToast\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","jsxDEV","_jsxDEV","NotificationToast","_s","user","token","notifications","setNotifications","eventSource","EventSource","onmessage","event","data","JSON","parse","console","log","notification","type","id","Date","now","title","message","amount","duration","badge","name","achievement","newLevel","prev","setTimeout","filter","n","error","onerror","close","removeNotification","length","className","children","map","onClick","fileName","_jsxFileName","lineNumber","columnNumber","e","stopPropagation","_c","$RefreshReg$"],"sources":["C:/Users/Lenovo/OneDrive/Documents/GitHub/msa/frontend/src/components/NotificationToast.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport '../styles/NotificationToast.css';\r\n\r\nconst NotificationToast = () => {\r\n    const { user, token } = useAuth();\r\n    const [notifications, setNotifications] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (token) {\r\n            // Listen for gamification events\r\n            const eventSource = new EventSource(`http://localhost:5000/api/gamification/events/stream?token=${token}`);\r\n            \r\n            eventSource.onmessage = (event) => {\r\n                try {\r\n                    const data = JSON.parse(event.data);\r\n                    console.log('Received gamification event:', data);\r\n                    \r\n                    // Create notification based on event type\r\n                    let notification = null;\r\n                    switch (data.type) {\r\n                        case 'xp_gained':\r\n                            notification = {\r\n                                id: Date.now(),\r\n                                type: 'success',\r\n                                title: 'XP Gagné!',\r\n                                message: `+${data.amount} XP`,\r\n                                duration: 3000\r\n                            };\r\n                            break;\r\n                        case 'badge_earned':\r\n                            notification = {\r\n                                id: Date.now(),\r\n                                type: 'achievement',\r\n                                title: 'Nouveau Badge!',\r\n                                message: data.badge.name,\r\n                                duration: 5000\r\n                            };\r\n                            break;\r\n                        case 'achievement_unlocked':\r\n                            notification = {\r\n                                id: Date.now(),\r\n                                type: 'achievement',\r\n                                title: 'Succès Débloqué!',\r\n                                message: data.achievement.name,\r\n                                duration: 5000\r\n                            };\r\n                            break;\r\n                        case 'level_up':\r\n                            notification = {\r\n                                id: Date.now(),\r\n                                type: 'levelup',\r\n                                title: 'Niveau Supérieur!',\r\n                                message: `Niveau ${data.newLevel}`,\r\n                                duration: 4000\r\n                            };\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                    \r\n                    if (notification) {\r\n                        setNotifications(prev => [...prev, notification]);\r\n                        \r\n                        // Auto-remove notification\r\n                        setTimeout(() => {\r\n                            setNotifications(prev => prev.filter(n => n.id !== notification.id));\r\n                        }, notification.duration);\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error parsing gamification event:', error);\r\n                }\r\n            };\r\n            \r\n            eventSource.onerror = (error) => {\r\n                console.error('EventSource error:', error);\r\n                eventSource.close();\r\n            };\r\n            \r\n            return () => {\r\n                eventSource.close();\r\n            };\r\n        }\r\n    }, [token]);\r\n\r\n    const removeNotification = (id) => {\r\n        setNotifications(prev => prev.filter(n => n.id !== id));\r\n    };\r\n\r\n    if (!user || notifications.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"notification-container\">\r\n            {notifications.map(notification => (\r\n                <div\r\n                    key={notification.id}\r\n                    className={`notification notification-${notification.type}`}\r\n                    onClick={() => removeNotification(notification.id)}\r\n                >\r\n                    <div className=\"notification-header\">\r\n                        <span className=\"notification-icon\">\r\n                            {notification.type === 'success' && '🎉'}\r\n                            {notification.type === 'achievement' && '🏆'}\r\n                            {notification.type === 'levelup' && '⭐'}\r\n                        </span>\r\n                        <h4 className=\"notification-title\">{notification.title}</h4>\r\n                        <button \r\n                            className=\"notification-close\"\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                removeNotification(notification.id);\r\n                            }}\r\n                        >\r\n                            ×\r\n                        </button>\r\n                    </div>\r\n                    <p className=\"notification-message\">{notification.message}</p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotificationToast;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}