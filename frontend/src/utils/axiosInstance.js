/**
 * @file axiosInstance.js
 * @description Fichier de configuration pour une instance Axios centralis√©e.
 * Ce module cr√©e une instance d'Axios avec une URL de base pr√©configur√©e
 * et un intercepteur de requ√™te pour ajouter automatiquement le token d'authentification JWT.
 * Cela simplifie les appels API √† travers l'application.
 */

// =================================================================================
// IMPORTATIONS
// =================================================================================
import axios from 'axios';

// Base URL for API
const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

// =================================================================================
// CONFIGURATION DE L'INSTANCE AXIOS
// =================================================================================

// Cr√©e une instance d'Axios avec des param√®tres par d√©faut.
const axiosInstance = axios.create({
    // L'URL de base de l'API backend. Toutes les requ√™tes relatives utiliseront cette URL.
    baseURL: API_BASE_URL,
});

// =================================================================================
// INTERCEPTEUR DE REQU√äTE
// =================================================================================

/**
 * Intercepteur de requ√™te Axios.
 * Ce middleware s'ex√©cute avant chaque requ√™te envoy√©e depuis l'application.
 * Son r√¥le est de r√©cup√©rer le token JWT depuis le localStorage et de l'injecter
 * dans l'en-t√™te 'Authorization' de la requ√™te si le token existe.
 */
axiosInstance.interceptors.request.use(
    (config) => {
        // R√©cup√®re le token stock√© dans le localStorage.
        const token = localStorage.getItem('token');

        // Si un token est trouv√©, l'ajoute √† l'en-t√™te d'autorisation.
        if (token) {
            config.headers.Authorization = `Bearer ${token}`;
        }

        console.log(`üåê API Request: ${config.method?.toUpperCase()} ${config.url}`);
        // Retourne l'objet de configuration de la requ√™te modifi√© (ou non).
        return config;
    },
    (error) => {
        // G√®re les erreurs qui pourraient survenir lors de la configuration de la requ√™te.
        // Cette fonction est rarement d√©clench√©e mais est une bonne pratique √† conserver.
        console.error('‚ùå Request interceptor error:', error);
        return Promise.reject(error);
    }
);

// =================================================================================
// INTERCEPTEUR DE R√âPONSE
// =================================================================================
axiosInstance.interceptors.response.use(
    (response) => {
        console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);
        return response;
    },
    async (error) => {
        const originalRequest = error.config;

        console.error(`‚ùå API Error: ${error.response?.status || 'Network'} ${originalRequest?.url}`);

        // Gestion des erreurs d'authentification

        return Promise.reject(error);
    }
);

// =================================================================================
// EXPORTATION
// =================================================================================
export default axiosInstance;
