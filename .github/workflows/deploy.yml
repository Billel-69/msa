name: Deploy to Production

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for RAG service
      id: meta-rag
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rag-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push RAG service image
      uses: docker/build-push-action@v5
      with:
        context: ./rag_service
        file: ./rag_service/Dockerfile
        push: true
        tags: ${{ steps.meta-rag.outputs.tags }}
        labels: ${{ steps.meta-rag.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST_IP }}
        username: deploy
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Navigate to application directory
          cd /opt/msa-app || { echo "Application directory not found"; exit 1; }
          
          # Pull latest changes
          echo "Pulling latest code from develop branch..."
          git fetch origin
          git checkout develop
          git pull origin develop
          
          # Log in to GitHub Container Registry
          echo "Logging in to GitHub Container Registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Set environment variables for production images
          echo "Setting up production environment..."
          export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:develop"
          export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:develop"
          export RAG_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/rag-service:develop"
          
          # Pull latest images using production compose
          echo "Pulling latest Docker images..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml pull
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml down
          
          # Start updated containers with production configuration
          echo "Starting updated containers..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          sleep 30
          
          # Check if services are running
          echo "Checking service status..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml ps
          
          # Test API health endpoint
          echo "Testing API health..."
          curl -f http://localhost:5000/api/health || curl -f http://localhost:5000/health || echo "API health check failed"
          
          # Clean up old images
          echo "Cleaning up old Docker images..."
          docker image prune -f
          
          echo "Deployment completed successfully!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment to beta.kaizenacademy.io completed successfully"
        else
          echo "❌ Deployment failed"
          exit 1
        fi